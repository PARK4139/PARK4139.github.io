____________________________________________________________________________________ RasPi4Mgr
ras4 + ssh + db server + web server + spring + spring boot + model2(mvc) // op server에 db server와 web server를 local server로서 구현
ras pi 서버         음악재생예약  알람예약     리눅스용
____________________________________________________________________________________ remote control

vnc 접속
ssh 접속
http 접속
    (chrome remote desktop)

우분투 데스크탑 22.04.1 LTS
전체 Ubuntu Desktop 이미지에는 웹 서핑과 문서 작성에서 소프트웨어 개발에 이르기까지 Raspberry Pi를 기본 PC로 전환하는 데 필요한 모든 것이 포함되어 있습니다. 크기 때문에 RAM이 2GB 이상인 Raspberry Pi 4 모델에서만 작동합니다.
https://ubuntu.com/download/raspberry-pi



우분투 코어 22 LTS
Ubuntu Core는 유니버셜 패키징 형식인 스냅을 기반으로 구축된 더 간결하고 컨테이너화된 운영 체제입니다.
추가 보안 및 OTA 업데이트를 위해 보안 부팅 및 전체 디스크 암호화를 지원합니다.
Ubuntu Desktop에서 IoT 소프트웨어를 개발하고 대규모로 쉽게 Ubuntu Core 장치에 배포하십시오.
https://ubuntu.com/download/raspberry-pi

linux 에 oracle xe 설치

____________________________________________________________________________________ _______________________ js   dynamic table
 <script>
 var ArrayListData = [
	 {'이름' : '홍', '나이' : '20', '성별' : '남'},
	 {'이름' : '이', '나이' : '25', '성별' : '여'},
	 {'이름' : '박', '나이' : '30', '성별' : '여'},
 ]
 buildInnerHtml(ArrayListData);
 function buildInnerHtml(ArrayListData) {
 for (var i=0; i < ArrayListData.length; i++)
 {
 var rows = `<tr>
 <td>${ArrayListData[i].이름}</td>
 <td>${ArrayListData[i].나이}</td>
 <td>${ArrayListData[i].성별}</td>
 </tr>`
 document.getElementById('#id').innerHTML += rows
 }
 }

____________________________________________________________________________________ _______________________
Maria db
MS sql db
oracle db
vue.js
p5.js
jsp
asp
model 1
model 2
model MVC






_______________________________________________________________________________________________________ dev server access
withv```server available```4대/5대
withv```server to be discarded```1대/5대
server 30
server 125
_______________________________________________________________________________________________________ op server access
itc dorm op web server access
    DESKTOP-I25VIFM 에서 MACS CLIENT(ITC DORM VPN PROGRAM) 을 통해서 REMOTE ACCESS

itc dorm op db server access

서강대 dorm op web server access

kulhouse op web server(IIS + ASP + SVN)
    http://localhost:8080/home/index_01.asp


_______________________________________________________________________________________________________ withv works

 + 다국어지원
 외부 SM(Management)
 sever op(프로그램 설치/setting
 로그 mgmt(주기적 delete )
 백업 mgmt
 web server mgmt(주기적 재부팅)
 학교 행정실 담당자 소스수정요청
 html 일부 renewal
 학교 행정실 담당자 퇴관취소요청
 db 일부 renewal
 + 외부 sys 연동
 + 신규외부sys연동설치지원
 + 신규외부sys연동설정지원
 + 신규외부sys연동테스트지원
 + 연동테스트지원
 + 이상에 대한 문의(withVisionSystem access 불가시 work담당자에게 연락(VPN program)))


 ____________________________________________________________________________________ https SSL 인증서 교체 처리 ( 약 년에 1번 주기)
업무 주기 = 약 1년
https 인증서 발급 기관,  withv , 학교(담당자)
tomcat web.xml
기존의 tomcat web.xml은 주석처리하여 백업하고
기존의 기존의 SSL 인증 file도 백업하고
ssl 인증서 제공 업체로 부터 SSL 인증 file 과 password 를 얻어 file 과 web.xml 을 renewal 한다.
해당 web server 재기동```windows service 에 들어가서 server 를 재기동한다.
기존 update 서 만료일을 chrome browser 로 들어가서 점검한다.


 인증서 이슈가 발생했나 봅니다....
 우리측 문제는 아니고 itc의 서버 설정 문제인 경우 일 수도 있다고 구글링 을 통해서 알게되었습니다.
 99%는 서버에서의 설정 issue 라고 할정도 서버 설정을 잘 못하는 경우가 많은 것 같습니다.
 server 로 접속해서 internet explorer 로 인증서 갱신 여부를 내부에서 점검해보면 내부는 갱신이 되어 있을 수 있습니다.
 내부에서 갱신이 되어있는데도 외부로 접속 시 인증서 갱신이 되어 있지 않다면 아마 학교의 gateway 의 문제 일 수 있다고 합니다.

 ____________________________________________________________________________________ (특정학생 불합격처리)
 합격자명단에 없도록
 상벌점명단에 있도록



 ____________________________________________________________________________________  jsMgr
 ____________________________________________________________________________________  js 기능 포팅 레퍼런스 (4초 뒤에 naver로 이동)
 // $(document).ready(function() {
 // setInterval("calc_time()", 1000);
 // });
 // var sec = 0;
 // function calc_time(){
 // sec += 1;
 // if( sec >= 4 ) {
 // window.location.href = "http://www.naver.com";
 // return;
 // }
 // }

 ____________________________________________________________________________________  js 기능 포팅 레퍼런스 (_____________________)

 //if(usr control scroll bar){스크롤 이벤트 blah blah via mouse}
 $(window).scroll( function() {
 // S(document).scrollTop() : 0 이라는 뜻
 $('#navigation‘).css('top', $(document).scrollTop() );
 });

 ____________________________________________________________________________________  js 기능 포팅 레퍼런스 (_____________________)

 //if(usr move mouse to over text){hover 이벤트 blah blah via mouse}
 $(function(){
 $('#navigation li').hover(function(){
 $(this).animate({ paddingLeft : '+=15px' }, 1666||200);
 }, function(){
 $(this).animate({ paddingLeft : '-=15px' }, 1666||200);
 })
 })

  ____________________________________________________________________________________  JS browser tab control
 window.open('','_self').close();


 ____________________________________________________________________________________  JS browser console control
 console.log('기본');
 console.info('정보');
 console.debug('디버그');
 //BLUE
 //출력한 내용이 나오지 않으면 콘솔에 출력 옵션을 확인
 console.warn('경고');//YELLOW
 console.error('에러');// RED



 ____________________________________________________________________________________  JS browser console control
 const Mgrs = { owner: 'YD', text: 'Hello world!' };
 const loginMgr = { owner: 'YD', text: 'Hello world!'  }; //method 는 어떻게 만드는 데?


 console.log('%cwarningwarningwarningwarningwarningwarningwarningwarningwarningwarning_s','color:red;font-size:10px;');
 console.log('Mgrs', JSON.parse(JSON.stringify(Mgrs))); //console.log('Mgrs', Mgrs); REPLACEMENT
 console.log(`${Mgrs} ${message}`); // 백틱 사용하기
 console.log('%cwarningwarningwarningwarningwarningwarningwarningwarningwarningwarning_e','color:red;font-size:10px;');


____________________________________________________________________________________  javaMgr
 ____________________________________________________________________________________  JAVA validation based on custom anotation
 @AssertTrue//custom validation process annotation
 method(){
	 //Custom Logic
 }

 @AssertFalse//custom validation process annotation //ConstraintValidator 적용하여 재사용 가능한 custom logic 적용 가능
 method(){
	 //Custom Logic
 }
 ____________________________________________________________________________________  JAVA exception based on custom anotation

 @ControllerAdvice//Global 예외 처리 annotation


 @ExceptionHandler//특정 Controller 예외처리

____________________________________________________________________________________  java

int iMax    = 0;
int[] asScores= { 50, 55, 34, 65, 78, 93, 23};
for(int i : asScores )  iMax = Math.max( i, iMax );
System.out.println( iMax );//93

____________________________________________________________________________________  java

Math.random()*100

____________________________________________________________________________________  java StringBuffer
StringBuffer 스레드 안전성이 중요 시 되는 경우 사용
____________________________________________________________________________________  java StringBuilder
StringBuilder 쓰레드 안전성 보다 속도가 중요시 되는 경우 사용(이런 때가 언제지?...)
StringBuffer 이 후로 출시
class Main
{
public static void main(String[] args)
{
String str = "Techie Delight";
char ch = '_';
int pos = 6;

StringBuilder sb = new StringBuilder(str);

// 지정된 위치의 문자 교체
sb.setCharAt(pos, ch);
str = sb.toString();

// 수정된 문자열을 출력
System.out.println(str);
}
}
____________________________________________________________________________________  java  StringTokenizer
?


____________________________________________________________________________________  projectMgr
benchmarking_steam
game 로그인 웹
상아쿠아 밴치마킹
미니네 아쿠아 밴치마킹


Development Schedule
	Development 수행기간 s = 2022 08 00 00 00
	Development 수행기간 e = 2022 10 11 01 40

Intronduction =
Developed system operation Environment

Tech Stacks applied into Developed system
    HTML
    Chrome Browser
    Chrome Development Tool
    Notepad++
    Visual Studio Code
    Visual Studio Code plugins
    CSS
    js(java script)
    jQuery
    Bootstrap 4.3





Project를 진행하면서 느낀점

개인정보활용제한로직
기숙사신청제한로직

 PROJECT_MGMT_TB
 외부업체_withv_connection_TB
 외부업체와 연동할 때 바로 우리쪽과 table과 연동되게 하지 말고 완충을 하도록 temp_tb를 사용하자.
 CODE_TB``````CODE_TYPE_F```CODE_TYPE_L```CODE_TYPE_M```CODE_TYPE_S```CODE_NM```USE_YN```REG_DATE```REG_ID
 쿠키사용허용팝업```DB에 그냥 하면 안되나
 SCHEDULE_MGMT_TB
 ERP
 CHK_YN
 학사 MGMT  학사전환신청자_TB       학사_TB
 병원 MGMT  입원수속신청자_TB       입원자_TB
 회원 MGMT(ADMIN ACTION)  회원가입신청자_TB       회원_TB
 회원 MGMT(usr ACTION)  회원가입신청자_TB       회원_TB
 회원 MGMT_기준_TB
 신청가능기간
 신청가능시한
 캠핑장 예약 MGMT     예약신청자_TB   예약자_TB
 쇼핑몰 구매 MGMT(ADMIN ACTION)     구매요청자_TB  (구매요청점검)  입금자_TB  (입금점검)  배송대기자_TB   (배송)    물품수령자_TB
 쇼핑몰 구매 MGMT(usr ACTION)     구매요청자_TB  (구매요청)    입금자_TB  (입금)    배송대기자_TB   (배송대기)  물품수령자_TB
 입사 MGMT 기능
 퇴사 MGMT 기능
 회계 MGMT 기능
 VA  MGMT 기능
 출입 MGMT 기능(벌점 MGMT 기능 연동)
 환불 MGMT 기능
 벌점 MGMT 기능
 외부 연동
 학교 연동
 학적 연동
 출입 연동
 식당 연동
 업체 연동(업체별 INTERFACE 규격서 참고)
 VA 연동
 학교VA _ID STUDENTS 맵핑 및 MGMT
 신용카드 연동
 신용중간업체를 통해서 카드사와의 연동
 SMS_연동_TB
 원격검침 연동
 입사 MGMT 기능
 퇴사 MGMT 기능
 회계 MGMT 기능
 출입 MGMT 기능```상벌점_TB
 환불 MGMT 기능
 시나리오 관점 메뉴얼
 일괄기능
 도움말
 메뉴얼
 사용자메뉴얼
 관리자메뉴얼




 usr.finger
 키보드.ESC
 키보드.Enter
 마우스.leftBtn
 마우스.rightBtn
 monitor





 건강식 판매 키오스크 FOOD_TYPE
 더 나은 나에게
 더 나은 나의 월요일
 유기농
 더 가성비

____________________________________________________________________________________ 최근신청정보유무점검로직 (신규_기존_구분 컬럼=신규(1), 기존(0)
____________________________________________________________________________________ logic to SPEAK CAUSE AND SOLUTION
error_str = "신청기간이 아닙니다.<br></br>관리자에게 문의하세요!<br></br>032)870-2903";
alert('학번(수험번호)을 입력해주세요.');
alert('생년월일을 입력해주세요.');
alert('이름을 입력해주세요.');
out.println(msgBox.returnMsg("해당모집기간이 아닙니다.","self",""));
out.println(msgBox.returnMsg("신청가능하지 않은 인원입니다.","self",""));
out.println(msgBox.returnMsg("개인정보 미등록자 기준정보가 올바르지않습니다!  ","self",""));
out.println(msgBox.returnMsg("휴학/제적/졸업생/일반인은 신청할수 없습니다.","self",""));//"usr 화면에 현재신청불가능 사유 와 SOLUTION
out.println("<script type='text/javascript'>history.back();</script> ");//"usr의 화면을 이전페이지로 출력"
기숙사신청개인정보활용여부
alert("공지사항 '동의함'을 선택하셔야 생활관 신청이 가능합니다.");//"usr 화면에 동의해야 진행이 가능함을 alert"
alert("공지사항 '동의함'을 선택하셔야 생활관 신청이 가능합니다.");//"usr 화면에 동의해야 진행이 가능함을 alert"
alert("개인정보 수집 및 이용 '동의함'을 선택하셔야 생활관 신청이 가능합니다.");
alert("개인정보 수집 및 이용 '동의함'을 선택하셔야 생활관 신청이 가능합니다.");
alert("고유식별정보 수집 '동의함'을 선택하셔야 생활관 신청이 가능합니다.");
alert("고유식별정보 수집 '동의함'을 선택하셔야 생활관 신청이 가능합니다.");
alert("개인정보의 제3자 제공 '동의함'을 선택하셔야 생활관 신청이 가능합니다.");
alert("개인정보의 제3자 제공 '동의함'을 선택하셔야 생활관 신청이 가능합니다.");
____________________________________________________________________________________ confirm logic
confirm("입력하신 학번(" + document.getElementById('student_no').value +"), 생년월일(" + document.getElementById('student_apply_id').value +"), 이름(" + document.getElementById('student_name').value +")이 맞습니까?"
___________________________________________________ 합격 로직
-- 가정
-- 단일 거대테이블로서, 쿼리로서, 필요한 모든데이터는 db recode 에 존재한다고 가정

_.학생이름="학생이름1"//
_.학생구분="신입생"//
_.학년="1학년"//
_.모집학기구분="1학기"//
_.집주소_국가="대한민국"//
_.집주소_도="경기도"//
_.집주소_시="안양시"//
_.상벌점=""//
_.신청상태=""//
_.기숙사신청제한사유존재여부=""//
_.기숙사신청제한사유=""//
_.성적="90"//
_.거리점수="_"//
if(집주소_시==1급지){거리점수=""}//홈페이지 -
if(집주소_시==2급지){거리점수=""}//홈페이지 -
if(집주소_시==3급지){거리점수=""}//홈페이지 -
if(집주소_시==4급지){거리점수=""}//홈페이지 -
if(집주소_시==5급지){거리점수=""}//홈페이지 -
if(집주소_시==6급지){거리점수=""}//홈페이지 -
_.성적 및 거리점수 합산="_"//
if(recode ==신입생 1학년 1학기){0.7거리점수+0.3성적}//홈페이지 -
if(recode ==신입생 1학년 2학기){0.3거리점수+0.7성적}//홈페이지 -
if(recode ==재학생 2학년 1학기){0.3거리점수+0.7성적}//홈페이지 -
if(recode ==재학생 2학년 2학기){0.3거리점수+0.7성적}//홈페이지 -
if(recode ==재학생 3학년 1학기){0.3거리점수+0.7성적}//홈페이지 -
if(recode ==재학생 3학년 2학기){0.3거리점수+0.7성적}//홈페이지 -
if(recode ==재학생 4학년 1학기){0.3거리점수+0.7성적}//홈페이지 -
if(recode ==재학생 4학년 2학기){0.3거리점수+0.7성적}//홈페이지 -
성적 및 거리점수 합산 순 정렬//order by _
if(recode =="성적 및 거리점수 합산 동점자 존재"){_}




__________________________________________________________________________________________________  thymeleaf vs jsp
__________________________________________________________________________________________________  //DBtoJSP
}catch(Exception e){
System.out.println("_.jsp error");
System.out.println(e.getMessage()); // 에러의 원인을 간단하게 출력합니다
System.out.println(e.toString());// 에러의 Exception 내용과 원인을 출력합니다.
e.printStackTrace();// 에러의 발생근원지를 찾아서 단계별로 에러를 출력합니다.
}finally{
 System.out.println("[_.jsp] lease poolsize: "+DBManager.getActualPoolsize());
 if(pass_yn.equals("N")){
 System.out.println("[_.jsp] student_no:"+ student_no + " // pass_yn: "+pass_yn);
 out.println("<script type='text/javascript'>history.back();</script> ");
}
 __________________________________________________________________________________________________ //JSPtoJSP
 <form name="fm">
 <input class="" name="key" placeholder="key" value=""/>
 <input class="" name="" type="text"  value=""  placeholder="학번 EX)_________" onkeydown="alert_as('현재 컨텐츠 준비중 입니다.')"/>
 <input class="" name="" type="button" value=""  placeholder="생년월일 EX)940405>" onkeydown="alert_as('현재 컨텐츠 준비중 입니다.')"/>
 <input class="" name="" type="text"  value=""  placeholder="이름 EX)박정훈"    onkeydown="alert_as('현재 컨텐츠 준비중 입니다.')"/>
 <input class="" name="" type="button" value="취소" placeholder=""          onclick="window.close()"/>
 <input class="" name="" type="button" value="신청" placeholder=""          onclick="chk_validate()"/>
 <a href="#" class="close" onclick="window.close()" ><span class="blind">닫기</span></a>
 </form>
 <%
 req.setCharacterEncoding("utf-8");
 String key = (String)req.getAttribute("key");
 %>
 __________________________________________________________________________________________________ //JSPtoDB
 __________________________________________________________________________________________________ //DBtoDB
 // thymeleaf segments vs jsp include
 <th:replacement _ > vs <%@include file="/jsp/_.jsp" %>



 __________________________________________________________________________________________________ DB_and_JSP_connectionMgr
 String driverName = "oracle.jdbc.driver.OracleDriver";
 String url = "jdbc:oracle:thin:@localhost:1521:XE";
 ResultSet rs = null;
 Class.forName(driverName);
 Connection con = DriverManager.getConnection(url,"board","board");
 Statement stmt = con.createStatement();//preparedStatement 사용하자..
 String sql = "select * from board where idx = " + idx ;// StringBuffer 사용//
 rs = stmt.executeQuery(sql.toString);
 while(rs.next()){

 __________________________________________________________________________________________________  schedulerMgr
 ____________________________________________________________________________________ scheduleMgr
  jsonArray
  json themplate
  jqueryTemplate
  ajax
  db connection


  jhp.makeReservation("hairshop"){}//서인국 헤어스타일


  //parameter and argument idea
  String dorm_apply_permission="PERMISSION"
  String dorm_apply_permission="NON PERMISSION"
  String dorm_apply_process="Y"
  String dorm_apply_process="N"
  String dorm_apply_result="pass"
  String dorm_apply_result="limited"
  Mgr_territory
  senario_territory
  TEST_territory




  out.print("<script>location.alert('회원가입을 처리하는데 문제가 생겼습니다. 회원가입을 다시시도해 주세요.   라고 주저리 주저리 ');</script>");
  out.print("<script>location.alert('회원가입이 정상처리되었습니다. 로그인을 시도해 주세요.');</script>");



  나의 불편함을 느끼는 부분을 refactoring을 시도하였습니다.
  이는 code 재활용성에 대한 생각을 깊게 해주었으며 반복되는 코드에 대한 단점을 분별하게 해주었습니다.
  refactoring 에 투자한 시간이 늘 수록 업무 처리의 효율에 대하여 충분히 고려할 수 있게 되는 경험이 생기는 것 같았습니다.



  IDE 를 사용해야하는 이유
  여러가지 가 있지만, 그중 가장 관심이 있는 부분은 코드생산성 입니다.
  자동완성 뿐만 아니라 에러 소지가 있는 부분이라던지 에러가 발생한 위치라던지 아주 시각적으로 구분이 쉽도록
  가이드를 해주는 역할 이 아주 좋습니다.



 xhlrms ghavmffjtm emffutj(영어로 잘못 친건대 이거 한글화해주는 프로그램 만들자)


 생활코딩 포트포워딩 강의 수강

 김윤호 만나자 다 믿는 건 하지 말자
 수료증
 스프링 책

 하늘이 숫가락 구매

 withvision system forward to 신규 담당자
 win 10 리테일 주문 및 청구하기 이종욱 차장



백팩
이름        용도
이너 백팩      노트북 보호
아우터 백팩     가방 디자인

____________________________________________________________________________________ text to mp3 ( 예정)
트러블 슈팅 코드 아이디
트러블 슈팅 아이디
160 1000
160 1600
150 1500
15 10501
99 90909








부적합 표현과 적합한 표현 에 대한 생각
신청대기 : 신청은 되었고, 합격은 대기 중이니 신청의 상태는 대기가 아니라 완료이다...신청대기  라는 말보다는 합격대기 가 더 적합한 표현인것 것 같다.




_____________________________________________________________________________________________________________________ object
itcDormSystem
itc_dorm_DB_server
    itc_VACS_client_system
itc_dorm_web_server
itc정보보안팀
itcAdministrativeOfficeMember
HF
withvMember
withv_Member
HF_Member
itc_Member
건대_Member
_____________________________________________________________________________________________________________________  ?
 dim
 window.opener.postMessage
 XSS          ≒ cross sign.
 XSS_Defense  ≒ sql injection principle
 제어권        ≒ ?
 CreateObject ≒  가정) withv와 카카오 API 와 asp 에서 제어권을 넘기지 않고 ajax 통신을 한다면 사용하는 것.





System.out.println(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> debugging id 2022 12 11 21 02 s");
System.out.println(sql.toString());
System.out.println(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> debugging id 2022 12 11 21 02 e");


System.out.println(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> darkCameleon id 2022 12 11 21 02 s");
System.out.println(sql.toString());
System.out.println(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> darkCameleon id 2022 12 11 21 02 e");


System.out.println(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> darkCamel id 2022 12 11 21 02 s");
System.out.println(sql.toString());
System.out.println(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> darkCamel id 2022 12 11 21 02 e");


jung_hoon_park_territory






