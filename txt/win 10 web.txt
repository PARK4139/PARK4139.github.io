i think we should learn popular tech stacks.
// ______________________________________________________________ html source code structure standard model _________________________________________________________________
// ______________________________________________________________ DOM structure _________________________________________________________________
HTML DOM에서 제공하는  object  set (object collection
html  source code 를 작성할 때 많은 사람들이 따르는  standard 을 따라서 만드는 것
standard that W3C recommand to use
object  that W3C recommand to use
object   model  that W3C recommand to use
HTML DOM 3 를 따라 작성된  source code 를 분석하는 것.
// ______________________________________________________________ BOM structure _________________________________________________________________
Browser Object Model
W3C  standard 이 아니다.
js 에서는 이러한 BOM  model 의  object 들을 global  object  로 사용할 수 있습니다.
// ______________________________________________________________ web browser structure _________________________________________________________________
navigation toolbar, location bar, title bar, tab bar, command system icons
menu bar, bookmarks toolbar
status bar, resizing grippy
// ____________________________________________________________________ web js frameworks ____________________________________________________________________________________________
vue
angular
react
부트스트랩 : 백엔드 개발자가 샘플 화면을 구성할 때 많이 사용
// ____________________________________________________________________ web js libraries ____________________________________________________________________________________________
jquery+3.6.0.js
jQuery 1.12.4 		// 다범용
Prototype.js
Dojo.js
GWT(Google Web Toolkit).js
MochiKit.js
// ______________________________________________________________ window as object _________________________________________________________________// is it loaded already. i don't know why.// when we use window as object,we can abbriviate window as prefix.
// ______________________________________________________________ document as object _________________________________________________________________// is it loaded already. i don't know why.// when we use window as object,we can probabbly abbriviate window as prefix.
location.(something)	// Window.location  property에 연결되어 있음.
location.(something)	// Document.location  property에 연결되어 있음.
RegExp.prototype.exec()
RegExp.prototype.test()
RegExp.prototype.toString()			// RegExp 객체의 regular expression 과 같은 의미를 가지는 regular expression  리터럴 string 을 반환
RegExp.prototype.global				// 검색 패턴을 비교할 때 일치하는 모든 부분을 선택하도록 설정하는 플래그인 'g'를 가리킴.
RegExp.prototype.ignoreCase			// 검색 패턴을 비교할 때 대소문자를 구분하지 않도록 설정하는 플래그인 'i'를 가리킴.
RegExp.prototype.multiline			// 검색 패턴을 비교할 때 여러 줄의 입력 string 을 그 상태 그대로 여러 줄로 비교하도록 설정하는 플래그인 'm'을 가리킴.
RegExp.prototype.source				// 검색 패턴이 포함하고 있는 string 을 가리킴.
Error.(something)			// Error as object inheritance 
// ______________________________________________________________ file.js _________________________________________________________________
js is prototype-based object  지향 language 
js is not class-based object  지향 language 
js 에서 임의의 object_a 와 object_b property의 keys와 value가 모두 같아도 object_a == object_b 가 아니며  object_a === object_a도 아니다.
js 에서는 현재 존재하고 있는 object 를 prototype 으로 사용하여, 해당 object 를 복제하여 재사용하는 것
js 의 모든 object 는 prototype (prototype)이라는 object 를 가지고 있습니다.
new  operator 를 사용해 generation한 object 는 generation자의 prototype 을 자신의 prototype 으로  inheritance 받습니다.
prototype chains
prototype chain inspection
prototype chain
	prototype 이  inheritance 되는 vertual linked ring
js 는 literal을 new String(str)을 호출한 것처럼 string  literal을 object 로 자동 변환
NaN means Not A Number
모든 Number instance 는 Number.prototype으로부터  method 와  property 를  inheritance 받습니다.
HTML document 의 모든 것은 node라는 개념으로서 분석할 수 있다.
server  측 js 	
client  측 js 
	비동기식 이벤트 중심(event-driven)의 programming   model // event propagation ( 이벤트 전파 )// bubbling event propagation
	버블링 전파 방식은 이벤트가 발생한 요소부터 시작해서, DOM 트리를 따라 위쪽으로 올라가며 전파되는 방식입니다.
	해당 요소의 리스너가 실행된 후, 그 부모 요소에 등록된 리스너가 실행되고, 또다시 그 부모 요소에 등록된 리스너가 실행됩니다.
	이벤트의 전파는 Document  object 뿐만 아니라 가장 마지막에는 Window  object 까지 계속 이어집니다.// capturing event propagation
	먼저 Window  object 의 리스너가 실행된 후, Document  object 에 등록된 리스너가 실행되고, 또다시 그 자식 요소에 등록된 리스너가 실행
	실제 이벤트의 대상이 되는 요소에 이벤트가 전달되기 전에 상위 요소에 등록된 이벤트 리스너가 이를 가로채거나 잡아낼 수 있습니다.
	이렇게 해당 이벤트 리스너가 호출되지 않도록 하는 기법을 "이벤트 취소 기법"
js program 에서는 런타임 오류가 발생할 때마다 Error object 의  instance 가 만들어져 해당 오류의 정보를 저장.// exception
	프로그램 실행 중에 발생하는 런타임 오류// error
	프로그램 구문의 문법적인 오류// js strict mode
	기존 js language 의 일부 기능을 제한한 문법을 사용
	몇 가지 중요한 기능을 수정하여 강력한 오류 검사
	향상된 보안 기능을 제공// js strict mode grammer
	global 영역에서는 선언되지 않은  variable 를 사용해도 global  variable 로 자동으로 인식합니다.
	strict mode로 선언된 function  블록에서는 선언되지 않은  variable 를 사용하면 오류를 발생.// js strict mode ( target, 제한사항 )	// target	제한사항
 variable 		선언되지 않은  variable 나  object 를 사용할 수 없음.
		eval() function  내에서 선언된  variable 는 외부에서 사용할 수 없음.
 property 	읽기 전용  property 에는 대입할 수 없음.
		한  property 를 여러 번 정의할 수 없음.
function 		function 를 구문이나 블록 내에서 선언할 수 없음.
매개 variable 	매개 variable 의 이름이 중복되어서는 안됨.
		arguments  object 의 요소 값을 변경할 수 없음.
string 	string  "eval"과 "arguments"는 사용할 수 없음.
8진수	숫자 리터럴에 8진수 값을 대입할 수 없음.
this	this 포인터가 가르키는 값이 null이나 undefined인 경우 global  object 로 변환되지 않음.
delete	delete 키워드를 사용할 수 없음.
with	with 문을 사용할 수 없음.
예약어	(implements, interface, let, package, private, protected, public, static, yield)( 다음 예약어들은 사용할 수 없음.	)// bracket
a(b)c	전체 패턴을 검색한 후에 괄호 안에 명시된 string 을 저장함. (ex00 : "abc"를 검색한 후에 b를 저장함.)
[abc]	꺾쇠 괄호([]) 안에 명시된 문자를 검색함. (ex00 : "abc"를 검색함.)
[0-3]	꺾쇠 괄호([]) 안에 명시된 숫자를 검색함. (ex00 : 0부터 3까지의 숫자를 검색함.)
[\b]	백스페이스 문자를 검색함.
[\n]	백스페이스 문자를 검색함.
{n}		앞의 문자가 정확히 n번 나타나는 경우를 검색함. n은 반드시 양의 정수이어야만 함.
{m,n}	앞의 문자가 최소 m번 이상 최대 n번 이하로 나타나는 경우를 검색함. m과 n은 반드시 양의 정수이어야만 함.// quantifier
n*	바로 앞의 문자가 0번 이상 나타나는 경우를 검색함. /{0, }/와 같음.
n+	바로 앞의 문자가 1번 이상 나타나는 경우를 검색함. /{1, }/과 같음.
n?	바로 앞의 문자가 0번 또는 1번만 나타나는 경우를 검색함. /{0,1}/과 같음.// special characters ( 정규식 작성을 위한 특수문자 )
\	"역슬래시(\) 다음에 일반문자가 나오면" "해석 as 이스케이프 문자"하고, "역슬래시(\) 다음에 특수 문자가 나오면" "해석 as 일반 문자".
\d	/[0-9]/
\D	문자 검색	/[^0-9]/
\w	/[A-Za-z0-9_]/  ( _를 포함한 )
\W	/[^A-Za-z0-9_]/  ( ^은 not을 의미하는 것 같다. ) 
\s	공백문자 검색.( such as 띄어쓰기, 탭, 줄 바꿈 문자 )
\S	문자 검색  ( 띄어쓰기, 탭, 줄 바꿈 문자 등의 공백 문자가 아닌 )
\b	단어의 prefix00 패턴 일치 검색.	공백문자를 기준으로 단어 간 구분을 하는 것 같음.   ( 아직 연습이 필요한 것 같다. 이해가 안된다. 활용을 못 하겠다.)
\b	단어의 suffix00 패턴 일치 검색.
\xhh	16진수 hh에 해당하는 유니코드 문자를 검색함.
\uhhhh	16진수 hhhh에 해당하는 유니코드 문자를 검색함.// flag ( 비교모드 옵션 설정 )
i	set as 대소문자 미구분 비교모드 ( defalut는 대소문자 구분 비교모드 )
g	set as 일치하는 모든 부분을 선택하도록 설정함. ( 선택 후 변경이라던가 유요한 부분이지 않을까 싶은데 ) 
m	줄의 입력 string 을 그 상태 그대로 여러 줄로 비교하도록 설정함.
y	대상 string 의 현재 위치부터 비교를 시작하도록 설정함.// object iteration
method.property 에서 필요한 것을 찾아서 가져오는 것.
object iterate
// ______________________________________________________________ event evolution	 _________________________________________________________________// event is evlouting now as following hightech device's evolution.
DOM Level 3 이벤트 명세
HTML5 관련 이벤트 명세
모바일 장치를 위한 이벤트 명세
// ______________________________________________________________  text 와 정규식패턴 간 비교 ( RegExp.prototype.test() 사용 ) _________________________________________________________________
var x00 = "abbcdefabgh";
var x10 = /ab+/;					// regular expression generation ( regular expression literal? )
var x20 = x10.toString(x00);		// RegExp.toString()         // RegExp.prototype.toString() 사용
document.write(r20);
var x00 = "abbcdefabgh";
var x10 = /ab+/;
var x20 = x10.test(x00); 
document.write(x20);  			// true		( 패턴 일치 )
var x00 = "abbcdefabgh";
var x10 = /abbb+/;
var x20 = x10.test(x00); 
document.write(x20); 			// false	( 패턴 불일치 )
var x00 = "abbcdefabgh";
var x10 = /ab+/;
var x20 = x10.exec(x00);      
document.write(x20);			// abb      ( 패턴 일치 ) ( 첫번째 text 반환)
var x00 = "abbcdefabgh";
var x10 = /abbb+/;
var x20 = x10.exec(x00);
document.write(x20);			// null  ( 패턴 불일치 )
var x00 = new RegExp("a+bc"); 		// /a+bc/    regular expression generation ( RegExp as object )
var x00 = new RegExp("AB", "i");		//    /AB/ ( i as flag )     regular expression generation ( RegExp as object 이용 )
var x00 = "Javascript";
var x10 = /^j/;
x00.match(x10);  // null
var x00 = "Javascript";
var x10 = /^J/;
x00.match(x10);    // J
var x00 = "abc 123 abc 123";
var x10 = /(\w+) (\d+)/;
x00.match(x10);     // abc 123, abc, 123
var x00 = "abc 123 abc 123";
var x20 = /(\w+) (\d+) \1 \2/;
x00.match(x20); 	// abc 123 abc 123, abc, 123		// x.match(x10);  ( regular expression 과 모두 일치하는 부분 string 뿐만 아니라, 괄호를 사용하여 저장된 부분 string 도 함께 반환 )
var x00 = "Hong Gil Dong";		
var xx00 = /(\w+)\s(\w+)\s(\w+)/;                  // 2개의 \s를 기준으로 3개의 \w+를 나누어 구분하고 각 \w+를 $1, $2, $3에 저장함.
var xxx00 = x.replace(xx, "$2 $3 $1"); // $1, $2, $3 에서  $2 $3 $1 로서 재배열함.
xxx;                                              // Gil Dong Hong
var x00 = "123abc";
var x10 = /\d+/;           //   /[0-9]/
var x10 = /\d+?/;      // 	숫자를 검색하지만, 가능한 적은 수의 문자를 가지는 패턴을 검색함.
x.search(x10);     //	 123
x.search(x10); //	 1
var x00 = "Hello World!";
var x10 = /lo*/;		// 'lo'가 0번 이상 나타나는 경우를 검색함.
var x10 = /lo+/;			// 'lo'가  1번 이상 나타나는 경우를 검색함.
var x10 = /lo?/;		// 'lo'가  0 또는 1번만 나타나는 경우를 검색함.
document.getElementById("id00").innerHTML = x.search(x10) + "<br>" + x.search(x10) + "<br>" + x.search(x10);
// ______________________________________________________________ 특정 literal 존재 검사 _________________________________________________________________
// ______________________________________________________________ 특정 literal 비교 검색( regular expression application ) _________________________________________________________________var x00 = "abc123abc";   
var x00 = "abc 123 abc"; 
var x00 = "abc@123!abc"; 
var x00 = "ab1bc2cd3de";
var x00 = "abc 123";		
var x00 = "bcabcAB";
var x10 = /bc\b/;						// "bc"
var x10 = /\w\s\w/; 					// "c 1"
var x10 = /\d/;    						// 0부터 9까지의 숫자를 검색함.
var x10 = /[3-9]/;    					// 3부터 9까지의 숫자를 검색함.
var x10 = /AB/;         			    // defalut : 대소문자 구분 모드.
var x10 = /AB/i;
// ______________________________________________________________ specific pattern 반복횟수 inspection _________________________________________________________________
var x00 = "간장 공장 공장장은 강 공장장이고, 된장 공장 공장장은 장 공장장이다."
var x10 = /공장/;
x00.search(x10);		      // 3   	( 3 times serched )
var x20 = x00.search(x10);		( not tested )
var x00 = "간장 공장 공장장은 강 공장장이고, 된장 공장 공장장은 장 공장장이다."
var x10 = /alpha/;					
x00.search(x10);       		  // -1      ( 0 times serched )
// ______________________________________________________________ exception handling _________________________________________________________________
// ______________________________________________________________ set "전체 스크립트" as "strict mode" _________________________________________________________________
"use strict"    // set "전체 스크립트" as "strict mode"
try {
	num = 3.14; // 선언되지 않은  variable 를 사용했기 때문에 오류를 발생시킴.
} catch (ex) {
	document.getElementById("id00").innerHTML = ex.name + "<br>";
	document.getElementById("id00").innerHTML += ex.message;
}
// ______________________________________________________________ set "function block" as "strict mode" _________________________________________________________________
str = "mistake!";			// 선언되지 않은  variable 를 사용했지만, 자동으로 global  variable 로 선언됨.
document.getElementById("noStrict").innerHTML = str + "<br>";
function StrictBlock() {
	"use strict"		//  set "function block" as "strict mode"
	try {
		num = 123		// 선언되지 않은  variable 를 사용했으므로, 에러가 발생함.
	} catch (ex) {
		document.getElementById("funcStrict").innerHTML = ex.name + "<br>";
		document.getElementById("funcStrict").innerHTML += ex.message;
	}
}
StrictBlock();
// ______________________________________________________________ error generation 고의적으로 _________________________________________________________________
<button id="button00">button00</button>
<p id="text"></p>
<script>
	var x00 = document.getElementById("button00");
	x00.addEventListener("click", f00);					// click event listner generation
	function f00() {
		try {
			throw new Error("직접 발생시킨 에러입니다!");	// Error  object 를 사용   throw  			( throw ;를 활용한 error를 고의적으로 generation )      
		} catch (ex) {	// 발생된 에러를 매개 variable  ex로 접근할 수 있음.
			document.getElementById("id00").innerHTML = ex.name + "<br>";	// name  property 는 에러의 타입을 저장함.
			document.getElementById("id00").innerHTML += ex.message;		// message  property 는 에러 메세지를 저장함.
		}
	}
</script>
// ______________________________________________________________ try / catch / finally _________________________________________________________________
try {										// try block 에서 발생한 예외는 발생한 예외 코드나 Error  object 를 인수로서 catch 블록에 전달
예외를 처리하길 원하는 실행 코드;
} catch (ex) {							
예외가 발생할 경우에 실행될 코드;
} finally {									// finally 블록은 try 블록에서 예외가 발생하건 안 하건 맨 마지막에 무조건 실행됩니다.
try 블록이 종료되면 무조건 실행될 코드;
}
// ______________________________________________________________ try / catch _________________________________________________________________
try {										// try block 에서 발생한 예외는 발생한 예외 코드나 Error  object 를 인수로서 catch 블록에 전달
예외를 처리하길 원하는 실행 코드;
} catch (ex) {							
예외가 발생할 경우에 실행될 코드;
}
// ______________________________________________________________ try / finally _________________________________________________________________
try {										// try block 에서 발생한 예외는 발생한 예외 코드나 Error  object 를 인수로서 catch 블록에 전달
예외를 처리하길 원하는 실행 코드;
} finally {									// finally 블록은 try 블록에서 예외가 발생하건 안 하건 맨 마지막에 무조건 실행됩니다.
try 블록이 종료되면 무조건 실행될 코드;
}
// ______________________________________________________________ event handling _________________________________________________________________
// ______________________________________________________________ event propagation cancelation _________________________________________________________________
function f00(event) {
	event.stopPropagation(); 						// event paragation cancelation
}	
// ______________________________________________________________ event propagation cancelation _________________________________________________________________
function f00(event) {
	event.preventDefault(); 						// Link's default act cancelation
}
// ______________________________________________________________ mouse event destruction _________________________________________________________________
function f00() {
	x00.removeEventListener("mouseover", f01);			 //  mouseover event handler destruction
	x00.removeEventListener("mouseout", f02);			 //  mouseout event handler generation
}
// ______________________________________________________________ // mouse event generation _________________________________________________________________
	<style>
		#divBox00 { width: 100%; height: 100px; border: 2px00 solid red; }
		#paraBox00 { width: 80%; height: 50px; border: 2px00 solid orange; }
		#spanBox00 { border: 2px00 solid green; }
	</style>
</head>
<body>
	<div id="divBox">
		<p id="paraBox">para area 1 <span id="spanBox">span area</span>para area 2</p>
	</div>
	<p id="id00"></p>
	<script>
		document.getElementById("divBox").addEventListener("click", f00, true);			// if click divbox,  do f00    // event handler generation as capturing event propagation
		document.getElementById("paraBox").addEventListener("click", f01, true);  		// if click parabox, do f01		// event handler generation as capturing event propagation
		document.getElementById("spanBox").addEventListener("click", f02, true);  		// if click spanbox, do f02		// event handler generation as capturing event propagation
		function f00(event) {
			document.getElementById("id00").innerHTML += "div area is clicked<br>";
		}
		function f01(event) {
			document.getElementById("id00").innerHTML += "para area is clicked<br>";
		}
		function f02(event) {
			document.getElementById("id00").innerHTML += "span area is clicked<br>";
		}
	</script>
// ______________________________________________________________ // mouse event generation _________________________________________________________________
	<style>
		#divBox00 { width: 100%; height: 100px; border: 2px00 solid red; }
		#paraBox00 { width: 80%; height: 50px; border: 2px00 solid orange; }
		#spanBox00 { border: 2px00 solid green; }
	</style>
</head>
<body>
	<div id="divBox">
		<p id="paraBox">para area 1 <span id="spanBox">span area</span>para area 2</p>
	</div>
	<p id="id00"></p>
	<script>
		document.getElementById("divBox").addEventListener("click", f00);			// if click div area, do f00		// click event handler generation as bubbling event propagation
		document.getElementById("paraBox").addEventListener("click", f01);			// if click para area, do f01		// click event handler generation as bubbling event propagation
		document.getElementById("spanBox").addEventListener("click", f02);			// if click span area, do f02		// click event handler generation as bubbling event propagation
		function f00(event) {
			document.getElementById("id00").innerHTML += "div area is clicked<br>";
		}
		function f01(event) {
			document.getElementById("id00").innerHTML += "para area is clicked<br>";
		}
		function f02(event) {
			document.getElementById("id00").innerHTML += "span area is clicked<br>";
		}
	</script>
// ______________________________________________________________ // event.property inspection _________________________________________________________________
<button id="button00">button00</button>
<p id="id00">old text</p>
<script>
	var x00 = document.getElementById("button00");
	x.addEventListener("click", f00);				 //  click event handler generation
	function f00(event) {
		document.getElementById("id00").innerHTML = "evnet type is " + event.type + "<br>evnet target is " + event.target;
	}
</script>
// ______________________________________________________________ // mouse event generation _________________________________________________________________
<button id="button00">button00</button>
<p id="text">old text</p>
<script>
	var btn = document.getElementById("button00");
	btn.addEventListener("click", clickBtn);			//  click event handler generation
	btn.addEventListener("mouseover", mouseoverBtn);	//  mouseover event handler generation
	btn.addEventListener("mouseout", mouseoutBtn);		//  mouseout event handler generation
	function clickBtn() {
		document.getElementById("id00").innerHTML = "button00 is clicked";
	}
	function mouseoverBtn() {
		document.getElementById("id00").innerHTML = "mouse exists on the inside of button00";
	}
	function mouseoutBtn() {
		document.getElementById("id00").innerHTML = "mouse exists on the outside of button00";
	}
</script>
// ______________________________________________________________ // mouse event generation _________________________________________________________________
<button id="button00">button00</button>
<p id="id00">old text</p>
<script>
	var x00 = document.getElementById("button00"); 
	x.addEventListener("click", f00);						// if click button00, replace id00.text "old text" to "new text"			// click event handler 등록.
	function f00() {
		document.getElementById("id00").innerHTML = "new text";
	}
</script>
// ______________________________________________________________ // mouse event generation  ( 가독성이 좋은 방식 ) _________________________________________________________________
<p id="id00">old text</p>
<script>
	window.onload = function() {							// if loaded html document, replace id00.text from "old text" to "new text" 
		var result00 = document.getElementById("id00");
		result00.innerHTML = "new text";
	}
</script>
// ______________________________________________________________ // mouse event generation _________________________________________________________________
<p id = "literal_button00" >literal_button00</p>
<script>
	var x00 = document.getElementById("literal_button00"); 
	x.addEventListener("click", f00);						// if click literal_button00, alert with 'literal_button00 is clicked'	// 선택한 요소에 click event handler를 등록함.
	function f00() {
		alert('literal_button00 is clicked');
	}
</script>
// ______________________________________________________________ // mouse event generation _________________________________________________________________
<p onclick="f00(this)">literal_button00</p>
<script>
function f00(element) {
	element.innerHTML = "new text";
}
</script>
// ______________________________________________________________ // mouse event generation ( 가독성이 덜 좋은 방식 ) ( 이 방식을 사용하지 말자 )_________________________________________________________________
<p onclick="alert('literal_button00 is clicked')">literal_button00</p>	// if click literal_button00, alert with 'literal_button00 is clicked'
// ______________________________________________________________ keyboard event _________________________________________________________________
// ______________________________________________________________ interaction button and f00() _________________________________________________________________
function f00() {
	document.getElementById("date").innerHTML += new Date() + "<br>";
}
function f00() {
	x00 = setInterval(f00, 2000);
}
function cancelInterval() {
	clearInterval(x);
}
// ______________________________________________________________ interaction button and f00() _________________________________________________________________
	<button onclick="f00()">1초 뒤에 현재 시간을 표시합니다!</button>
<button onclick="f00()">시간 표시 취소!</button>	 
var x;
function f00() {
x00 = window.setTimeout(f00, 1000);
}
function f00() {
window.clearTimeout(x);
}
function f00() {
document.getElementById("date").innerHTML += new Date() + "<br>";
}	
// ______________________________________________________________ interaction button and f00() _________________________________________________________________
	<button onclick="f00()">2초마다 현재 시간을 표시합니다!</button>
	<p id="date"></p>
	<script>
		function startInterval() {			window.setInterval(f00, 2000);
		}
		function printCurrentDate() {
			document.getElementById("date").innerHTML += new Date() + "<br>";
		} 
// ______________________________________________________________ interaction button and f00()   ( window.setTimeout() ) _________________________________________________________________
	<button onclick="f00()">2초뒤에 현재 시간을 표시합니다!</button>
	<p id="date"></p>
	<script>
		function f00() {
			window.setTimeout(f00, 2000);
		}
		function f00() {
			document.getElementById("date").innerHTML = new Date();
		}
// ______________________________________________________________ dialog box00 and button interaction generation _________________________________________________________________
function f00() {									
	var inputStr = window.prompt("당신의 이름을 입력해 주세요 : ", "reserved text");
	if (inputStr != null) {
		document.getElementById("id00").innerHTML = "당신의 이름은 " + inputStr + "입니다.";
	}
}
// ______________________________________________________________ dialogBox00  and button interaction generation _________________________________________________________________
function f00() {														//  1 button dialogbox.
	window.alert("확인을 누를 때까지 다른 작업을 할 수 없어요!");
}
// ______________________________________________________________ dialogBox00  and button interaction generation _________________________________________________________________
function window.f00() {			   						//  2 buttons dialogbox.
	var str;
	if (confirm("확인이나 취소를 눌러주세요!") == true) {
	str = "당신은 확인을 눌렀습니다!";
	} else {
	str = "당신은 취소을 눌렀습니다!";
	}
	document.getElementById("id00").innerHTML = str;	
}
// ______________________________________________________________ dialogBox00 and button interaction generation _________________________________________________________________
<button onclick="f00()">dialogbox's text</button>
function f00() {
	alert("확인을 누를 때까지 다른 작업을 할 수 없어요!");
}
// ______________________________________________________________ button ( next page  )  _________________________________________________________________
<button onclick="f00()">go to next page</button>
<script>
	function f00() {
		window.history.forward();			// web browser 히스토리 목록 접근 via window.history
	}
</script>
// ______________________________________________________________ button ( previous page ) _________________________________________________________________
<button onclick="f00()">go to previous page</button>
<script>
	function f00() {
		window.history.back();
	}
</script>
// ______________________________________________________________ button ( previous page ) _________________________________________________________________
<button onclick="f00()">go to previous page</button>
<script>
	function f00() {
		window.history.go(-1);			// we should send -1 as arguments, it will make previous page. 덜 직관적인 것 같다.
	}
</script>
// ______________________________________________________________ button (현재 크롬 창에 document 불러오기 ) _________________________________________________________________
<button onclick="f00()">새로운 document  열기</button>
function f00() {
	location.assign("/index.php");
}
// ______________________________________________________________ button ( 현재 크롬 창에 document 불러오기 ) (이전 document  삭제 후 불러온다. ) _________________________________________________________________
<button onclick="f00()">이전 document  삭제 후 새로운 document  열기</button>
function f00() {
	location.replace("/index.php");
}


// ______________________________________________________________ 정보 접근 _________________________________________________________________
// ______________________________________________________________ 현재 web browser language 정보 접근 _________________________________________________________________
document.write("현재 브라우저의 기본 language 설정은 " + navigator.language + "입니다.");
// ______________________________________________________________ 현재 브라우저가 실행되고 있는 OS 정보 접근 _________________________________________________________________
document.write("현재 브라우저가 실행되고 있는 운영체제는 " + navigator.platform + "입니다.");	
// ______________________________________________________________ 현재 web browser 기본 정보 접근 _________________________________________________________________
document.write("현재 사용 중인 브라우저의 버전 정보는 " + navigator.appVersion + "입니다.<br><br>");
// ______________________________________________________________ 현재 web browser 기본 정보 접근 _________________________________________________________________
document.write("userAgent  property 로 알 수 있는 추가 정보는 " + navigator.userAgent + "입니다.");
// ______________________________________________________________ 현재 web browser cookie 실행가능 여부 검사 결과 접근 _________________________________________________________________ 
document.write("현재 브라우저는 쿠키를 ");
if (window.navigator.cookieEnabled) {
	document.write("사용할 수 있습니다.");
} else {
	document.write("사용할 수 없습니다.");
}
// ______________________________________________________________ 자바 애플릿 실행가능 검사 결과 접근 _________________________________________________________________
document.write("현재 브라우저는 자바 애플릿를 ");
if (window.navigator.javaEnabled()) {
	document.write("실행할 수 있습니다.");
} else {
	document.write("실행할 수 없습니다.");
}
// ______________________________________________________________ browser data 접근 _________________________________________________________________// 방문자의 웹 브라우저의 종류를 미리 파악하여 web browser 간의 호환성을 유지하기 위한 방법// navigator.appName과 navigator.appCodeName 이 두  property 는 웹  standard 에서 제외되었으므로, 될 수 있으면 사용하지 않는 것이 좋습니다....대안은 ?
function f00 () {
	document.write("current document data 접근");
	document.write(<br>);
	document.write("현재 document 의 파일 경로명은 " + window.location.pathname + "입니다.");
	document.write(<br>);
	document.write("현재 document 의 인터넷 호스트 이름은 " + window.location.hostname + "입니다.");
	document.write(<br>);
	document.write("현재 document 의 URL 주소는 " + window.location.href + "입니다.");
	document.write(<br>);
	document.write("현재 document 의 URL 주소는 " + document.location.href + "입니다.");
}
function f00 () {
	document.write("current user display screen data access");
	document.write(<br>);
	document.write("현재 사용자의 디스플레이 화면의 너비는 " + screen.width + "픽셀입니다.");	// 현재 사용자의 모니터 화면 size
	document.write(<br>);
	document.write("현재 사용자의 디스플레이 화면의 높이는 " + screen.height + "픽셀입니다.");
	document.write(<br>);
	document.write("현재 web browser 창의 너비는 " + window.outerWidth + "픽셀입니다.");		//  현재 web browser 창의 크기 
	document.write(<br>);
	document.write("현재 web browser 창의 높이는 " + window.outerHeight + "픽셀입니다.");
	document.write(<br>);
	document.write("실제 사용할 수 있는 화면의 너비는 " + screen.availWidth + "픽셀입니다.");	//	실제 사용할 수 있는 화면 크기 ( 운영체제의 작업 표시줄과 같은 공간을 모두 제외한 크기 )
	document.write(<br>);
	document.write("실제 사용할 수 있는 화면의 높이는 " + screen.availHeight + "픽셀입니다.");
	document.write(<br>);
	document.write("사용자 화면의 한 픽셀당 표시할 수 있는 비트수는 " + window.screen.pixelDepth + "개 입니다.");			// 대부분의 컴퓨터에서 colorDepth와 pixelDepth는 같은 값을 가집니다
}
function f00 () {	
	document.write("current browser data 접근");
	document.write(<br>);
	document.write("현재 web browser 이름은 " + window.navigator.appName + "입니다.");
	document.write(<br>);
	document.write("현재 web browser 코드명은 " + window.navigator.appCodeName + "입니다.");
	document.write(<br>);
	document.write("현재 웹 브라우저의 너비는 " + window.innerWidth + "픽셀이고, 높이는 " + window.innerHeight + "픽셀입니다.");
	document.write(<br>);
	document.write("현재 브라우저의 수평 위치는 " + window.screenx00 + "입니다.");	// global  variable 
	document.write(<br>);
	document.write("현재 브라우저의 수직 위치는 " + window.screenY + "입니다.");	// global  variable 
	document.write(<br>);
	document.write("현재 웹브라우저의 제목은" window.document.title);
}
function f00 () {
	document.write("current web browser 히스토리 목록 개수 접근");
	document.write(<br>);	
	location.assign("/javascript/js_bom_history");
	document.getElementById("id00").innerHTML = "현재 브라우저의 히스토리 목록의 개수는 " + history.length + "개 입니다."; 
}	







// ______________________________________________________________ link blocking _________________________________________________________________
<a href="javascript:void(0)">이 링크는 동작하지 않습니다.</a><br><br>





// ______________________________________________________________ child node handling_________________________________________________________________
// ______________________________________________________________ // childnode.text replacement _________________________________________________________________
var x00 = document.getElementById("id01").childNodes;
x00[1].firstChild.nodeValue = "new text";
// ______________________________________________________________ // firstchild.text replacement partly _________________________________________________________________
var x00 = document.getElementById("id01").firstChild;
function f00() {
	x00.replaceData(7, 4, "저녁 7"); 						// x의 7번째 문자부터 4개의 문자까지를 "저녁 7"로 교체
}
// ______________________________________________________________ parent node and childe node handling _________________________________________________________________
// ______________________________________________________________ id00.parent.text replacement _________________________________________________________________
var x00 = document.getElementById("id00");
var x10 = document.getElementById("id10");
var x20 = document.getElementById("id20");
function f00() {
	x00.replaceChild(x20, x10);        				  // x10 삭제,  x20 이동,  x20 삭제  ( 다시 x20 요소를 만들어야 하네... 이거 조심스럽게 써야하는 것 같다...x20이 사라진다....)
} 
// ______________________________________________________________  id00.firstchild.text replacement _________________________________________________________________
function f00() {
	var x00 = document.getElementById("id00");
	x00.firstChild.nodeValue = "new text";
}
// ______________________________________________________________ // text replacement (partly) _________________________________________________________________
function f00() {
	var x00 = document.getElementById("id01");
	x00.firstChild.insertData(6, " additional text "); 					// x00의 6번째 부터 " additional text "를 추가함.
}
// ______________________________________________________________  tag.style replacement ) _________________________________________________________________
function f00() {
	var para;
	var x00 = document.getElementsByTagName("div")[0];
	x00.setAttribute("class", "para");						
}
// ______________________________________________________________ // tag generation _________________________________________________________________
function f00() {
	var x10 = document.getElementById("id00");				 
	var x00 = document.createElement("p");         				 // tag generation
	x00.innerHTML = "new text";
}
// ______________________________________________________________ // attribution application _________________________________________________________________
function f00() {
	var x00 = document.getElementById("id00");           			
	var x10 = document.createAttribute("style"); 					// "style node" generation
	x10.value = "color:red";										// change "style node value" as "color:red"
	x00.setAttributeNode(x10);                 					    // apply "style node" to "id00"
}
// ______________________________________________________________  "text node" generation _________________________________________________________________
function f00() {
	var x00 = document.getElementById("id00");       	  
	var x10 = document.createTextNode("new text"); 				   // "text node" generation
	x00.appendChild(x10);                              	
}
// ______________________________________________________________ // node remove	( child nodes 도 같이 제거가 된다. ) _________________________________________________________________
function f00() {
	var x00 = document.getElementById("id00");       	  
	var x10 = document.getElementById("id10");
	x00.removeChild(x10);                  			 
// ______________________________________________________________ // attribution remove	 _________________________________________________________________
function f00() {
	var x00 = document.getElementById("id00"); 				
	x00.removeAttribute("style");              				
// ______________________________________________________________ // node copy _________________________________________________________________
function cloneElement() {
	var x00 = document.getElementById("id00");     			 
	var x10 = document.getElementById("id10"); 				 
	x00.appendChild(x10.cloneNode(true));   					// x10을 복제하여 x00의 맨 마지막에 추가
}
// ______________________________________________________________ append child _________________________________________________________________
function f00() {
	var x00 = document.getElementById("id00"); 			 
	var x10 = document.getElementById("id10"); 	         
	x00.appendChild(x10);                  						 // id00에 id10를 append as child
}
// ______________________________________________________________ append child _________________________________________________________________
function f00() {
	var x00 = document.getElementById("id00");         		 
	var x10 = document.getElementById("id10");		 		 
	var x20 = document.getElementById("id20");         	     
	x00.insertBefore(x20, x10);									//  기준 노드의 바로 앞에 추가함.
}
// ______________________________________________________________ 자식 node data 접근 _________________________________________________________________
var x00 = document.getElementsByTagName("div");
var x10 = x00.length
document.getElementById("id01").innerHTML = "이 모든 자식  node 들의 개수는 " + x10 + "개 입니다.";
document.write(<br>);
document.write(document.getElementById("id01").childNodes[0].nodeValue);			 // 자식  node 들 중 첫 번째  node  의 text
document.write(<br>);
document.write(document.getElementById("id01").childNodes[1].firstChild.nodeValue);  // 자식  node 들 중 두 번째  node  의 text
document.write(<br>);
document.write(document.getElementById("id01").childNodes[2].nodeValue);						 // 자식  node 들 중 세 번째  node의 text
document.write(<br>);
// ______________________________________________________________ // text node handling problem 솔루션 ( not understand ) _________________________________________________________________// text node handling problem ( 어떤 브라우저들은 띄어쓰기나 줄 바꿈을 text node로 인식)// text node handling problem 솔루션 상세( 마지막 자식 node 를 찾은 후에, 찾은  node 의 타입이 요소  node 가 아니면 그 앞의  node 를 다시 검사// text node handling problem 솔루션 ( 을 사용하면 모든 브라우저에서 마지막 자식  node 로 같은 요소  node 를 선택할 수 있게 됩니다. )
<button onclick="f00()">마지막 자식  node  찾기 button</button>
<script>
var lastNode;
function f10(x00) {
	lastNode = x00.lastChild;
	while (lastNode.nodeType != 1) {
		lastNode = lastNode.previousSibling;
	}
}
function f00() {
	var x00 = document.getElementById("x00");
	f10(x00);
	document.getElementById("nodename").innerHTML = lastNode.nodeName;
}
<script>
// ______________________________________________________________ node access ( by using nodeName  property  ) _________________________________________________________________
// ______________________________________________________________ x00.innerHTML = x10.nodeName; _________________________________________________________________
var x00 = document.getElementById("id01");
var x10 = document.childNodes[1];
x00.innerHTML = x10.nodeName;
// ______________________________________________________________ x00.innerHTML = x10.nodeName; _________________________________________________________________
var x00 = document.getElementById("id01");
var x10 = document.childNodes[1].childNodes[0];
x00.innerHTML = x10.nodeName;
// ______________________________________________________________ x00.innerHTML = x10.nodeName; _________________________________________________________________
var x00 = document.getElementById("id01").firstChild.nodeValue;
document.getElementById("id02").innerHTML = x00;
// ______________________________________________________________ x00.innerHTML = x10.nodeName; _________________________________________________________________
var x00 = document.getElementById("id01").firstChild.nodeValue;
document.getElementById("id02").firstChild.nodeValue = x00;   		 
// ______________________________________________________________ ? _________________________________________________________________
var x00 = document.getElementById("heading").firstChild.nodeType;
document.getElementById("head").innerHTML = x00;           			// 3
document.getElementById("document").innerHTML = document.nodeType; 	// 9
// ______________________________________________________________ // node  _________________________________________________________________
document node 
	HTML document  전체를 나타내는  node 임.
element node
	모든 HTML 요소는 요소  node 이며, attribute node 를 가질 수 있는 유일한  node 임.
attribute node
	모든 HTML 요소의 속성은 속성  node 이며, 요소  node 에 관한 정보를 가지고 있음.
	하지만 해당 요소  node 의 자식  node (child node)에는 포함되지 않음.
text node
	HTML document 의 모든 text 는 text   node 임.
comment node
	HTML document 의 모든 주석은 주석  node 임.
// ______________________________________________________________ // node 간 관계      다양한 node tree를 그려두고 분석하는 숙달하여 이해하자. _________________________________________________________________
root notroot : (root node) (node not root node)
parent child : (parent node) (child node)
brother or sister : (sibling node) (sibling node)
(ancestor node) : 부모  node 를 포함해 계층적으로 현재  node 보다 상위에 존재하는 모든  node 
(descendant node) : 자식  node 를 포함해 계층적으로 현재  node 보다 하위에 존재하는 모든  node 
1. parentNode : 부모  node 
2. childNodes : 자식  node  리스트
3. firstChild : 첫 번째 자식  node 
4. lastChild : 마지막 자식  node 
5. nextSibling : 다음 형제  node 
6. previousSibling : 이전 형제  node 
// ______________________________________________________________ js standard object ( document object ) _________________________________________________________________// interaction  between    ( MLB   and     id01 as id.text color )// button01 as <button>
<button onclick="changeRedColor()">button01</button>
<button onclick="changeBlackColor()">button02</button>// id01 as id         ( id01 as id.color replacement)
<script>
var x00 = document.getElementById("id01");
function changeColor01() { x.style.color = "red"; }
function changeColor02() { x.style.color = "blue"; }
</script>// div as tag		( text color replacement  )
var x00 = document.getElementsByTagName("div"); // 모든 <div> 선택
for (var i = 0; i < x.length; i++) {
x.item(i).style.color = "red"; 			// 모든 <li> text  색상을  replacement 
}// li as tag		( text color replacement  )
var x00 = document.getElementsByTagName("li"); // 모든 <li> 선택
for (var i = 0; i < x.length; i++) {
x.item(i).style.color = "red"; 			// 모든 <li> text  색상을  replacement 
}// even as id		( even as id.text color replacement  )
var x00 = document.getElementById("even"); // 모든 id = "even"를 선택
x.style.color = "red"; // 모든 id = "even"인 요소 text  색상을  replacement // id01 as id         ( id01 as id.text showing )  ( fail )
var x00 = document.getElementById("id01");
document.write(x);// id01 as id         ( id01 as id.text replacement)
var x00 = document.getElementById("id01");
x.innerHTML = "new text";// id01 as id         ( id01 as id.property replacement)
var x00 = document.getElementById("id01");   
x.href = "/javascript/intro"; // 해당 요소의 href 속성값 replacement
x.innerHTML = " js  수업 바로 가기!";     // text replacement// odd as class		( odd as class.text color replacement  )
var x00 = document.getElementsByClassName("odd"); // 클래스가 "odd"인 모든 요소를 선택함.
for (var i = 0; i < x.length; i++) {
x.item(i).style.color = "red";  
}// first as name		( first as name.text color replacement  )
var x00 = document.getElementsByName("first"); // name 속성값이 "first"인 모든 요소를 선택함.
for (var i = 0; i < x.length; i++) {
x.item(i).style.color = "red"; 
}// li.odd      li as tag, odd as class 		( <li>.text color replacement  )
var x00 = document.querySelectorAll("li.odd");
for (var i = 0; i < x.length; i++) {
x.item(i).style.color = "red";
}
document.write(x);//      <title>.text   showing
var x00 = document.title; // <title> 요소를 선택함.
document.write(x);// html 요소generation
document.createElement(HTML요소) 지정된 HTML 요소를 generation함.
document.write(text )	HTML 출력 스트림을 통해 text 를 출력함.// 마우스 클릭 이벤트와 연결될 이벤트 핸들러 코드를 추가함.
document.getElementById( id ).onclick = function(){ 실행할 코드 }
document.anchors	name 속성을 가지는 <a>요소를 모두 반환함.	
document.applets	applet 요소를 모두 반환함. (HTML5에서 제외됨)	
document.body	<body>요소를 반환함.	
document.cookie	HTML document 의 쿠키(cookie)를 반환함.	
document.domain	HTML document 가 위치한 server 의 도메인 네임(domain name)을 반환함.
document.forms	<form>요소를 모두 반환함.	
document.images	<img>요소를 모두 반환함.	
document.links	href 속성을 가지는 <area>요소와 <a>요소를 모두 반환함.	
document.referrer	링크(linking)되어 있는 document 의 URI를 반환함.	
document.title	<title>요소를 반환함.	
document.URL	HTML document 의 완전한 URL 주소를 반환함.	
document.baseURI	HTML document 의 절대 URI(absolute base URI)를 반환함.	
document.doctype	HTML document 의 document  타입(doctype)을 반환함.	
document.documentElement <html>요소를 반환함.	
document.documentMode 웹 브라우저가 사용하고 있는 모드를 반환함.	
document.documentURI HTML document 의 URI를 반환함.	
document.domConfig	HTML DOM 설정을 반환함. (더는 사용하지 않음)	
document.embeds	<embed>요소를 모두 반환함.	
document.head	<head>요소를 반환함.	
document.implementation
HTML DOM 구현(implementation)을 반환함.	
document.inputEncoding
HTML document 의 문자 인코딩(character set) 형식을 반환함.	
document.lastModified
HTML document 의 마지막 갱신 날짜 및 시간을 반환함	
document.readyState
HTML document 의 로딩 상태(loading status)를 반환함.	
document.scripts	<script>요소를 모두 반환함.	
document.strictErrorChecking
오류의 강제 검사 여부를 반환함.	
// ______________________________________________________________ js standard object ( Number object ) _________________________________________________________________
// ______________________________________________________________ js standard object ( Number object ) _________________________________________________________________
// ______________________________________________________________ js standard object ( Number object ) _________________________________________________________________
// ______________________________________________________________ js standard object ( Number object ) _________________________________________________________________
js에서 모든 수는 실수이다
js에서 모든 수는 64비트 double precision floating point numbers로서 저장된다.
double precision floating point numbers를 가지고 수행하는 산술 연산의 결괏값은 언제나 오차가 발생할 가능성이 있다.
js 에서는 이러한 오차를 없애기 위해 정수의 형태로 먼저 변환하여 계산을 수행하고, 다시 실수의 형태로 재변환하는 방법을 사용하기도 합니다.
1. Number.prototype.toExponential()// Number  instance 의 값을 지수 표기법으로 변환한 후, 그 값을 string 로 반환
var num = 12.3456;       // Number  instance 를 generation함.
num.toExponential();     // 1.23456e+1
num.toExponential(2);    // 1.23e+1
num.toExponential(4);    // 1.2346e+1
12.3456.toExponential(); // 1.23456e+1
2. Number.prototype.toFixed()// Number  instance 의 소수 부분 자릿수를 전달받은 값으로 고정한 후, 그 값을 string 로 반환
var num = 3.14159265;  // Number  instance 를 generation함.
num.toFixed();         // 3
num.toFixed(2);        // 3.14
num.toFixed(4);        // 3.1416
3.14159265.toFixed(6); // 3.141593
3. Number.prototype.toPrecision()// Number  instance 의 가수와 소수 부분을 합친 자릿수를 전달받은 값으로 고정한 후, 그 값을 string 로 반환
var num = 3.14159265;      // Number  instance 를 generation함.
num.toPrecision();         // 3.14159265
num.toPrecision(2);        // 3.1
num.toPrecision(4);        // 3.142
3.14159265.toPrecision(6); // 3.14159
4. Number.prototype.toString()// Number  instance 의 값을 string 로 반환
var num = 255;       // Number  instance 를 generation함.
num.toString();      // 255
(255).toString();    // 255
(3.14).toString();   // 3.14
num.toString(2);     // 11111111
(100).toString(16);  // 64
(-0xff).toString(2); // -11111111// Number  instance 가 가지고 있는 값을 반환
5. Number.prototype.valueOf()		//  valueOf()는 object  자신을 반환하는 method
var numObj = new Number(123); // 123의 값을 가지는 Number  instance 를 generation함.
typeof numObj;                // object
var num = numObj.valueOf();
num;                          // 123
typeof num;                   // number// safe integer number 판별기( safe integer : IEEE 754 국제  standard 에서 정의한 64비트 부동 소수점 수로 정확히 표현되는 정수 ) ( -(253 - 1)부터 (253 - 1)까지의 모든 정수 )
Number.isSafeInteger(10);                  // true
Number.isSafeInteger(Math.pow(2, 53) - 1); // true
Number.isSafeInteger(Math.pow(2, 53));     // false
Number.isSafeInteger(Infinity);            // false
Number.isSafeInteger(NaN);                 // false
Number.isSafeInteger(3.14);                // false// integer number 판별기
Number.isInteger(0);        // true
Number.isInteger(-100);     // true
Number.isInteger(0.1);      // false
Number.isInteger("string "); // false
Number.isInteger(Infinity); // false
Number.isInteger(true);     // false// finite number 판별기
Number.isFinite(0);        // true
Number.isFinite(3e45);     // true
Number.isFinite(Infinity); // false
Number.isFinite(NaN);      // false// 다음은 global function 인 isFinite()에서 잘못된 결과를 반환하는 예제임.
isFinite("0");             // true
isFinite(null);            // true// Number.isFinite()  method 에서는 맞는 결과를 반환하고 있음.
Number.isFinite("0");      // false
Number.isFinite(null);     // false// NaN 판별기
Number.isNaN(NaN);       // true
Number.isNaN(0 / 0);     // true
Number.isNaN("NaN");     // false
Number.isNaN(undefined); // false
Number.isNaN("string ");  // false// text -> number ( parsing )
var string = "12";
Number.parseFloat(string);         // 12
var string = "12.34";
Number.parseFloat(string);   	   // 12.34
var string = "12string ";
Number.parseFloat(string);  	 // 12
var string = "12 34 56";
Number.parseFloat(string);  	 // 12
var string = "string  56";
Number.parseFloat(string); 		// NaN
var string = "12";
Number.parseInt(string);         // 12
var string = "12.34";
Number.parseInt(string);   	  	 // 12
var string = "12string ";
Number.parseInt(string);  	 	// 12
var string = "12 34 56";
Number.parseInt(string);  		 // 12
var string = "string  56";
Number.parseInt(string); 		// NaN
var x00 = 100;             // 숫자 literal
var y = new Number(100); // Number object 
document.write(100 == Number(100)  );               // true
document.write("<br>");
document.write(typeof x);                			

// number
document.write("<br>");
document.write(100 === Number(100) );               // true
document.write("<br>");
document.write(typeof y);                			// object
document.write("<br>");
document.write("<br>");
document.write("<br>");
document.write("<br>");
document.write("<br>");
document.write("<br>");
document.write("<br>");
document.write("<br>");
document.write("<br>");
document.write(x00 == y);               				 // true
document.write(typeof x);             				 // number
document.write("<br>");				
document.write(x00 === y);              				 // false
document.write(typeof y);             				 // object
var x00 = 100;             //100	// number literal
var y = new Number(100); //100	// object
typeof x;              		  // number
typeof y;               	 // object// js에서 4가지 특수값 문맥별로 자동처리
typeof null;        // object
Boolean(null);      // ​​​​​​​false
Number(null);       // ​​​​​​​0
String(null);       // ​​​​​​​null
typeof undefined;   // undefined
Boolean(undefined); // ​​​​​​​false
Number(undefined);  // ​​​​​​​NaN
String(undefined);  // ​​undefined
typeof NaN;         // ​​​​​​​number
Boolean(NaN);       // ​​​​​​​false
Number(NaN);        // ​​​​​​​NaN
String(NaN);        // ​​​​​​​NaN
typeof Infinity;    // ​​​​​​​number
Boolean(Infinity);  // ​​​​​​​true
Number(Infinity);   // ​​​​​​​Infinity
String(Infinity);   // ​​​​​​​Infinity
var x00 = 33.33 / 0;				// Infinity
var x00 = 22.22 / 0;				// Infinity
var x00 = 11.11 / 0;				// Infinity
var x00 = 1000 / 0;				// Infinity
var x00 = 10 / 0;				// Infinity
var y = Infinity + 1000		// Infinity
var y = Infinity - 1000		// Infinity
var y = Infinity * 1000		// Infinity
var y = Infinity / 1000		// Infinity
var y = -Infinity * 1000	// -Infinity
var z = 1 / Infinity		// 0
var x00 = 100 - "10";     //  90   ( "10"->10 자동변환 )
var y = 100 - "string"; // NaN
var z = 0 / 0;          // NaN
var x00 = 0xAB; // 16진수 0xAB
var y = 29;   // 29
var z = 29 + 0xAB;        // 200  ( 16진수 10진수 자동변환 )
var x00 = 999999999999999;	// 15자리의 정수부
var y = 9999999999999999;	// 16자리의 정수부
var z = 0.1 + 0.2;			// 0.30000000000000004 		( 0.00000000000000004 오차 발생 )
var z = (0.2 * 10 + 0.1 * 10) / 10; // 0.3
document.write("<br>");
document.write(z);// script that discriminate number.
var x00 = 100 * "string ";
if(isNaN(x)) { 					
document.write("x00 is not number");
} else {
document.write("x00 is number");
}// script that 진수 간 변환기
var num = 256;
document.write(num.toString(2) + "<br>");	//  10진법 -> 2진법 변환 : 100000000
document.write(num.toString(8) + "<br>");	//  10진법 -> 8진법 변환 : 400
document.write(num.toString(10) + "<br>");	// 	10진법 -> 10진법 변환 : 256
document.write(num.toString(16) + "<br>");	// 	10진법 -> 16진법 변환 : 100
// ______________________________________________________________ wrapper object	 _________________________________________________________________
var obj = new Object(); // 이 obj.prototype은 Object.prototype입니다.
var arr = new Array();  // 이 arr.prototype은 Array.prototype입니다.
var date = new Date();  // 이 date.prototype은 Date.prototype입니다.
var str = new String(str); // string  object  generation
var str = "string ";           // string  literal generation
str.length;                   // literal 값은 내부적으로 wrapper object를 generation한 후에 length  property 를 참조함.
str == strObj;                // 동등  operator 는 literal 값과 해당 wrapper object를 동일하게 봄.
str === strObj;               // 일치  operator 는 literal 값과 해당 wrapper object를 구별함.
typeof str;                   // string 타입
typeof strObj;                // object 타입
// ______________________________________________________________  inheritance 된 Object.method() 활용 _________________________________________________________________
// ______________________________________________________________ Object.setter() for property value replacement _________________________________________________________________
		document.write(gildong.age + "<br>");	// 20
		Object.defineProperty(gildong, "replacement Age", { set: function(n) { this.age = this.age - n; } });
		gildong.replacement Age = 5;
		document.write(gildong.age);			// 15
// ______________________________________________________________ property access _________________________________________________________________
var gildong = { age: 18 };
document.write(gildong.age + "<br>");	// 18
// ______________________________________________________________ Object.getter() for property value access _________________________________________________________________
var gildong = { age: 18 };
Object.defineProperty(gildong, "americanAge", { get: function() { return this.age - 1; } });
document.write(gildong.americanAge);	// 17
// ______________________________________________________________ object 의 primitive type 값 반환 ( I have not understood it yet, what is a primitive type value used for? )_________________________________________________________________
function func(n) {												// func(n) generation
	this.number = n;
	var myFunc = new func(4);											// myFunc generation
	document.write(myFunc + 5); 									// [object Object]5     반환  ( 이게 필요한게 아니고    9 가 필요한 상황에서 쓰는 것으로 생각이 든다 )
	func.prototype.valueOf = function() { 							// func.prototype.valueOf() 정의.
	return this.number;
}
document.write(myFunc + 5); 									// 9    반환 ( 9 가 필요한 상황에서 쓰는 것으로 생각이 든다 )
// ______________________________________________________________ object 의 값을 string 로 반환 _________________________________________________________________
var arr = [10, "string ", true];  				//array generation
var bool = false;								//boolean generation
function func() { return 0; } 					//function generation			//func generation
arr.toString();  								// 10,string ,true			 string 로 반환됨.
bool.toString(); 								// false				 string 로 반환됨.
func.toString(); 								// function  소스 코드			 string 로 반환됨.
// ______________________________________________________________ 해당 object 에 새로운  property 를 추가할 수 없도록 설정 및 설정 적용 검사_________________________________________________________________
var day = new Date();		 						 // day generation and Date property를 day로  inheritance 
var myDay = Object.preventExtensions(day);			 // day property를 추가할 수 없도록 설정
document.write(Object.isExtensible(day));          // false			object  day에 새로운  property 를 추가 불가
document.write('<br>');
document.write(Object.isExtensible(day));          // true			object  day에 새로운  property 를 추가 가능
// ______________________________________________________________ object_a.prototype이 Dog.prototype에  inheritance 되었는지를 검사.( 동일한 prototype chain 인지를 검사하는 것으로 보인다. )_________________________________________________________________
function Dog(color, name, age) {					// Dog generation as prototype 
this.color = color;
this.name = name;
this.age = age;
};
var myDog = new Dog("yellow", "sky", 1);		  // myDog generation and Dog property를 myDog로  inheritance 
var hisDog = new Dog("yellow", "jinsju", 1);      // hisDog generation and Dog property를 myDog로  inheritance      
var object_a = {
name: "박정훈",	
};
document.write(Dog.prototype.isPrototypeOf(myDog));         // true			object_a.prototype와 day.prototype이 같은 prototype chain에 있다.
document.write('<br>');
document.write(Dog.prototype.isPrototypeOf(object_a)); 		// false			object_a가 같은 prototype chain에 없다.
// ______________________________________________________________ 특정  property 가 해당 object 에 존재하고, 열거할 수 있는  property 인지를 검사 _________________________________________________________________
function Dog(color, name, age) {
this.color = color;
this.name = name;
this.age = age;
}
var myDog = new Dog("yellow", "sky", 1);// color  property 의 enumerable 속성을 false로 설정함.
Object.defineProperty(myDog, 'color', { enumerable : false} );
document.write(myDog.propertyIsEnumerable("color") + "<br>"); // false
document.write(myDog.propertyIsEnumerable("name") + "<br>");  // true
document.write(myDog.propertyIsEnumerable("age"));            // true
// ______________________________________________________________ 특정 object  내 특정  property  존재 검사 _________________________________________________________________
function Dog(color, name, age, family) {
this.color = color;
this.name = name;
this.age = age;
this.family = family;
this.breed = function() {
return this.color + " " + this.family;
}
}
var myDog = new Dog("yellow", "sky", 1,"래브라도 리트리버");
myDog.hasOwnProperty("color"); // true						myDog.color  가 존재합니다.
myDog.hasOwnProperty("breed"); // true						myDog.breed  가 존재합니다.
myDog.hasOwnProperty("class"); //  false를 반환함.			myDog.class  가 존재하지 않습니다.
// ______________________________________________________________  ( object overwrite ) _________________________________________________________________
function Dog(color, name, age) {
this.color = color;
this.name = name;
this.age = age;
}
var myDog = new Dog("yellow", "sky", 1);
var hisDog = new Dog("yellow", "jinsju", 1);      // 모든  property 의 값이 모두 같은 object 를 generation함.
var myDog = hisDog;                          // ( object overwrite ) 
document.write((hisDog == myDog) + "<br>");  // true
document.write((hisDog === myDog) + "<br>"); // true
document.write("우리 집 강아지는 이름은" + myDog.name + "입니다.");
// ______________________________________________________________ prototype을 통한 inheritance ( inheritance ) _________________________________________________________________
js   standard  object 의 prototype 은 수정해서는 안됩니다.
심각한 오류가 발생할 가능성이 있습니다.
손상된 prototype as standard object 아무래도 재설치가 답이지 않나?...
function Dog(color, name, age) {			// prototype generation
this.color = color;
this.name = name;
this.age = age;
};
Dog.prototype.family = "래브라도 리트리버";		// add property 	as Dog.prototype.family
Dog.prototype.breed = function() {			// add method      asa  Dog.rpototype.breed
return this.color + " " + this.family;
};
delete myDog.age; 							// delete property   as myDog.age
// ______________________________________________________________ prototype을 통한 inheritance ( inheritance ) _________________________________________________________________
function Dog(color, name, age) {			// prototype generation
this.color = color;
this.name = name;
this.age = age;
};
Dog.prototype.family = "래브라도 리트리버";		// add property 	as ( Dog.prototype.family )
Dog.prototype.breed = function() {			// add method       as ( Dog.rpototype.breed )
return this.color + " " + this.family;
};
var myDog = new Dog("yellow", "하늘", 2);		// prototype inheritance		from Dog.prototype
var hisDog = new Dog("yellow", "진주", 5);		// prototype inheritance		from Dog.prototype	
document.write("우리 집 강아지는 이름은" + myDog.name + "입니다.");
document.write("우리 집 강아지는 " + myDog.family + "이고, 친구네 집 강아지도 " + hisDog.family + "입니다.");
document.write('<br>');
document.write("친구네 집 강아지의 품종은 " + hisDog.breed() + "입니다.");
document.write('<br>');
document.write("우리 집 강아지의 품종은 " + myDog.breed() + "입니다.<br>");
// ______________________________________________________________ prototype  standard object 를 통한 inheritance ( inheritance ) _________________________________________________________________
function Dog(color, name, age) {			// prototype generation
this.color = color;
this.name = name;
this.age = age;
};
var myDog = new Dog("yellow", "하늘", 2);		// prototype inheritance		from Dog.prototype
var hisDog = new Dog("yellow", "진주", 5);		// prototype inheritance		from Dog.prototype	
document.write("우리 집 강아지는 " + myDog.color + "이고, 친구네 집 강아지도 " + hisDog.color + "입니다.");
// ______________________________________________________________ prototype을 통한 inheritance ( inheritance ) _________________________________________________________________// prototype일 경우에 object name을 작성 시 관례적으로 capitalize 하여
function Dog(color, name, age) {		// prototype generation
this.color = color;
this.name = name;
this.age = age;
}
var myDog = new Dog("yellow", "sky", 2); // myDog object에 Dog property를 부여하고 그 각 value는 property의 key 순서대로 yellow, sky, 2로 부여 ) new 사용하는 것이 포인트 같다.
myDog.family = "래브라도 리트리버";			 // add property       to myDog    as myDog.family       ( add  myDog.family   as property )
myDog.breed = function() {        		 // add method         to myDog    as myDog.breed   ( add myDog.breed as method )
return this.color + "<br>" + this.family;
}
document.write(myDog.breed());
// ______________________________________________________________ Dog.prototype handling _________________________________________________________________
// ______________________________________________________________ Dog.prototype generation _________________________________________________________________
function Dog(color, name, age) { // 개에 관한 generation자 function 를 작성함.       //Dog의 property를 작성한다.
this.color = color;          // 색에 관한  property 
this.name = name;            // 이름에 관한  property 
this.age = age;              //  age method를 만들자.      birthday property 랑    date method 있으면 될 것 같다.
}
var myDog = new Dog("yellow", "sky", 2); // myDog object에 Dog property를 부여하고 그 각 value는 property의 key 순서대로 yellow, sky, 2로 부여 ) new 사용하는 것이 포인트 같다.
document.write("우리 집 강아지는 " + myDog.name + "라는 이름의 ");
document.write('<br>');
document.write(myDog.color + " 털이 매력적인 강아지입니다.");
// ______________________________________________________________ prototype heritance _________________________________________________________________// inheritance 정보(property의 keys 또는 method)를 제공하기 위한 object // object_02가 object_01의 prototype을  inheritance 받으면 object_01의 property의 keys를 따올 수 있음.// 아마 method도 따올 수 있을 것 같음.
function Dog(color, name, age) { // 개에 관한 generation자 function 를 작성함.
this.color = color;          // 색에 관한  property 
this.name = name;            // 이름에 관한  property 
this.age = age;              //  age method를 만들자.      birthday property 랑    date method 있으면 될 것 같다.
}
var myDog = new Dog("yellow", "sky", 2); // 이 object 는 Dog라는 prototype 을 가짐.
document.write("우리 집 강아지는 " + myDog.name + "라는 이름의 " + myDog.color + " 털이 매력적인 강아지입니다.");
// ______________________________________________________________ function handling  _________________________________________________________________
// ______________________________________________________________ predefined functions  _________________________________________________________________
// ______________________________________________________________ eval("x00 + y"); _________________________________________________________________
var a = eval("x00 + y"); 			// 30
document.write(a);
// ______________________________________________________________ eval("y * 3"); _________________________________________________________________
var b = eval("y * 3"); // 60
document.write(b);
// ______________________________________________________________ object handling _________________________________________________________________
// ______________________________________________________________ object.property handling_________________________________________________________________
// ______________________________________________________________ object.property _________________________________________________________________
- dog.name = "하늘"
- dog.family = "래브라도 리트리버"
- dog.age = 0.1
- dog.weight = 300
// ______________________________________________________________ object.property generation _________________________________________________________________// Object.create()를 이용하면 object를 만들 수 있는 것으로 보여짐.
var obj = Object.create(null, {             // prototype name = null, create object name = obj
x: { value: 100, enumerable: true },    // add property x00 : 100
y: { value: 200, enumerable: true }     // add property y
});
Object.getPrototypeOf(obj); 				// obj.prototype를 반환
document.write('<br>');
document.write(obj.y);
document.write('<br>');
document.write(obj.x);
// ______________________________________________________________ object.property generation _________________________________________________________________
var sky = Object.create(null, {             // null prototype 을 사용하여 새로운 object 를 만들고
weight : { value: 100, enumerable: true },    // weight좌표를 나타내는 열거할 수 있는  property 와
age: { value: 200, enumerable: true }     // y좌표를 나타내는 열거할 수 있는  property 를 추가함.
});
Object.getPrototypeOf(sky); // object 의 prototype 을 반환해 줌.
document.write('sky.age : ');
document.write(sky.age);
document.write('<br>');
document.write('sky.weight : ');
document.write(sky.weight);
var dog = { name: "하늘", family: "래브라도 리트리버", age: 1, weight: 0.1 };
dog.name   // 하늘
dog.family   // 하늘
// ______________________________________________________________ object.property generation _________________________________________________________________
var dog = {
name: "하늘",
family: "래브라도 리트리버",
age: 1,
weight: 0.1
};
document.write("우리 집 강아지의 이름은 " + dog.name + "이고, 종은 " + dog.family + "입니다.");
// ______________________________________________________________ object.property generation _________________________________________________________________
var dogs = {
dog01: "sky",    
	dog02: "berry",    
dog03: "ara",    
dog04: "nori",    
dog05: "duri",
};
// ______________________________________________________________ object.property generation _________________________________________________________________
var dog01 = {
name: "sky",    
	age: ""
	birthday: ""
	weight: ""
};
// ______________________________________________________________ object.property generation _________________________________________________________________
var dog01 = {
// ______________________________________________________________ unit is "kg" _________________________________________________________________
2019 10 weight: "",
	2019 11 weight: "",
	2019 12 weight: "",
	2020 00 weight: "",
	2020 01 weight: "",
	2020 02 weight: "",
	2020 03 weight: "",
	2020 04 weight: "",
	2020 05 weight: "",
	2020 06 weight: "",
	2020 07 weight: "",
	2020 08 weight: "",
	2020 09 weight: "",
	2020 10 weight: "",
	2020 11 weight: "",
	2020 12 weight: "",
	2021 01 weight: "",
	2021 02 weight: "",
	2021 03 weight: "",
	2021 04 weight: "",
	2021 05 weight: "",
	2021 06 weight: "",
	2021 07 weight: "",
	2021 08 weight: "",
	2021 09 weight: "",
	2021 10 weight: "",
	2021 11 weight: "",
	2021 12 weight: "",	
	2022 01 weight: "",
	2022 02 weight: "",
	2022 03 weight: "",
	2022 04 weight: "",
	2022 05 weight: "37.6",
	2022 06 weight: "TBD",
	2022 07 weight: "TBD",
	2022 08 weight: "TBD",
	2022 09 weight: "TBD",
	2022 10 weight: "TBD",
	2022 11 weight: "TBD",
	2022 12 weight: "TBD",
};
// ______________________________________________________________ object.method handling_________________________________________________________________
// ______________________________________________________________ object.method generation_________________________________________________________________
var dog = {
mew: function(x) { 
return x;
}
};
document.write(dog.mew(3));
// ______________________________________________________________ object.method generation_________________________________________________________________
var dog = {
eat: function(x) { 
return x;
},
sleep: function(y) { 
return y;
},
play: function(z) { 
return z;
}	
};
document.write(dog.eat(3));
// ______________________________________________________________ object.property and object.method generation _________________________________________________________________
var person = {
name: "박정훈",      // 이름  property 를 정의함.
birthday: "19940405",  // 생년월일  property 를 정의함.
pId: "???????",      // 개인 id  property 를 정의함.
fullId: function() { // 생년월일과 개인 id를 합쳐서 주민등록번호를 반환함.
return this.birthday + this.pId;
}
};
document.write(person.name);
// ______________________________________________________________ object generation ________________________________________________________________
var object_a = {
};
// ______________________________________________________________ object generation ________________________________________________________________
var object_a = {
name: "박정훈",	
};
// ______________________________________________________________ object generation ________________________________________________________________
var person = {
name: "박정훈",
birthday: "19940405",
pId: "???????",
fullId: function() {
return this.birthday +'     '+ this.pId;
}
};
document.write('<br>');
document.write(person.name);    // person.name의 value에 접근
document.write('<br>');
document.write(person["name"]); // person.name의 value에 접근
document.write('<br>');
document.write(person.fullId);  // function () { return this.birthday +'<br>'+ this.pId; } 
document.write('<br>');
document.write(person.fullId()); // 19940405 1234567
// ______________________________________________________________ object generation ________________________________________________________________
var day = new Date(); // new  operator 를 사용하여 Date 타입의 object 를 generation함.
document.write("올해는 " + day.getFullYear() + "년입니다.");// ___________________________________________________________________ finite infinite inspection ____________________________________________________________________
isFinite(123);       // true
isFinite(123e100);   // true
isFinite(0);         // true
isFinite(true);      // true
isFinite(false);     // true
isFinite(null);      // true
isFinite("123");     // true
isFinite("");        // true
isFinite("string ");  // false
isFinite(undefined); // false
isFinite(NaN);       // false// ___________________________________________________________________ NaN inspection ____________________________________________________________________
isNaN(123);       // false
isNaN(123e100);   // false
isNaN(0);         // false
isNaN(true);      // false
isNaN(false);     // false
isNaN(null);      // false
isNaN("123");     // false
isNaN("");        // false
isNaN("string ");  // true
isNaN(undefined); // true
isNaN(NaN);       // true// ________________________________________________________________ string->floating point number encode _______________________________________________________
parseFloat("123");        // 123
parseFloat("123.000");    // 123
parseFloat("123.456");    // 123.456
parseFloat("12 34 56");   // 12
parseFloat(" 123 ");      // 123
parseFloat("123 초콜릿"); // 123
parseFloat("초콜릿 123"); // NaN// ________________________________________________________________ string->int encode _______________________________________________________
parseInt("123");        // 123
parseInt("123.000");    // 123
parseInt("123.456");    // 123
parseInt("12 34 56");   // 12
parseInt(" 123 ");      // 123
parseInt("123 초콜릿"); // 123
parseInt("초콜릿 123"); // NaN
parseInt("10", 10);     // 10
parseInt("10", 8);      // 8
parseInt("10", 16);     // 16
parseInt("0x10");       // 16
// ______________________________________________________________ URI encode and decode _________________________________________________________________
var uri = "http://google.com/search.php?name=박정훈&city=서울";
var enc1 = encodeURI(uri);
var enc2 = encodeURIComponent(uri);
document.write(enc1 + "<br>" + enc2);
document.write("<br>");
document.write("<br>");
document.write("<br>");
var dec1 = decodeURI(enc1);
var dec2 = decodeURIComponent(enc2);
document.write(dec1 + "<br>" + dec2);
// ______________________________________________________________ object->16진법 이스케이프 시퀀스 문자 encode and decode _________________________________________________________________
var str = "Hello! World ?#$";
var str = "http://google.com/search.php?name=박정훈&city=서울";
document.write(str);
document.write("<br>");
var enc = escape(str);
document.write(enc);
document.write("<br>");
var dec = unescape(enc);
document.write("<br>");
document.write(dec);
// ______________________________________________________________ object->number encode _________________________________________________________________
Number("123");        // 123
Number("123.000");    // 123
Number("123.456");    // 123.456
Number("12 34 56");   // NaN
Number("123 초콜릿"); // NaN
Number(true);         // 1
Number(false);        // 0
Number(new Date());   // 현재 날짜에 해당하는 숫자를 반환함.
Number(null);         // 0
// ______________________________________________________________ object->string encode _________________________________________________________________
String(123);        // 123
String(123.456);    // 123.456
String("123");      // 123
String(new Date()); // 현재 날짜에 해당하는 string 을 반환함.
String(null);       // null
String(true);       // true
String(false);      // false
String(Boolean(1)); // true
String(Boolean(0)); // false// ___________________________________________________________________ func0000 __________________________________________________________________________
var func0000(x) {
return x;
}
document.write(func0000(3));			// 3// ___________________________________________________________________ func0000 __________________________________________________________________________
var func0000(x, y) {
return x00 + y;
}
document.write(func0000(2, 3));// ___________________________________________________________________ func0000 __________________________________________________________________________
var func0000() {
return x=3;
}
document.write(func0000());			// 3// ___________________________________________________________________ func0000 __________________________________________________________________________
var func0000() {
return x=;
}
document.write(func0000(3));			// 3// ___________________________________________________________________ parameters handling __________________________________________________________________________// ___________________________________________________________________ first argument를  variable  firstNum에 저장하고 rest argument들은 배열 restArgs에 저장 ( 나머지 매개 variable 는 익스플로러, 사파리에서 지원하지 않습니다.)__________________________________________________________________________
var sub(firstNum, ...restArgs) {
for(var i = 0; i < restArgs.length; i++) {
firstNum -= restArgs[i];
}
return firstNum;
}
sub(10, 2, 3);    // 10 - 2 - 3 = 5
sub(10, 1, 5, 8); // 10 - 1 - 5 - 8 = -4// ___________________________________________________________________ first argument를  variable  firstNum에 저장하고 rest argument들은 배열 restArgs에 저장 __________________________________________________________________________
var sub(firstNum, ...restArgs) {
for(function i = 0; i < restArgs.length; i++) {
firstNum = firstNum - restArgs[i];
}
return firstNum;
}
sub(10, 2, 3);    // 10 - 2 - 3 = 5
sub(10, 1, 5, 8); // 10 - 1 - 5 - 8 = -4// ___________________________________________________________________ func0000 __________________________________________________________________________
var func0000() {									// first argument에서 last arguments 까지의 합
function v01 = 0;
for(function i = 0; i < arguments.length; i++) {
v01 += arguments[i];
}
return v01;
}
document.write(func0000(1, 2, 3, 4, 5, 6, 7, 8, 9, 10) + "<br>");		 // 55		 // argument[0] + ... + argument[9]// ___________________________________________________________________ rest parameter processing __________________________________________________________________________// ___________________________________________________________________ func0000() __________________________________________________________________________
var func0000() {									// first argument에서 두 번째부터 last argument까지를 뺌	.
function v01 = arguments[0];
for(function i = 0; i < arguments.length-1; i++) {
		function v01 = v01 - arguments[i+1];
}
return v01;
}// ___________________________________________________________________ func0000(x,y,z) __________________________________________________________________________
var func0000(x,y,z) {
	function v01 = arguments[0];					//  v01 = arguments[0]
	function i = 0;
	function v01 = v01 - arguments[1];			//  v01 = arguments[0] - arguments[1]
	function i = 1;
	function v01 = v01 - arguments[2];			//  v01 = arguments[0] - arguments[1] - arguments[2]
	return v01;
}
document.write(func0000(100,3,3) + "<br>");// ___________________________________________________________________ func0000(x,y,z,d) __________________________________________________________________________
var func0000(x,y,z,d) {
	function v01 = arguments[0];					//  v01 = arguments[0]
	function i = 0;
	function v01 = v01 - arguments[1];			//  v01 = arguments[0] - arguments[1]
	function i = 1;
	function v01 = v01 - arguments[2];			//  v01 = arguments[0] - arguments[1] - arguments[2]
	function i = 2;
	function v01 = v01 - arguments[3];			//  v01 = arguments[0] - arguments[1] - arguments[2] - arguments[3];
	return v01;
}
document.write(func0000(100,3,3,3) + "<br>");// ___________________________________________________________________ func0000() __________________________________________________________________________
var func0000() {
	function v01 = arguments[0];					//  v01 = arguments[0]
	for (i = 0; i < arguments.length - 1; i = i + 1)
		function v01 = v01 - arguments[i+1];			//  v01 = v01 - arguments[i + 1]
	return v01;
}
document.write(func0000(100) + "<br>");
document.write(func0000(100,3,3,3) + "<br>");
document.write(func0000(100,3,3,3,3,3,3,3,3,3,3,3,3,3,3,) + "<br>");// ___________________________________________________________________ func0000() __________________________________________________________________________
var func0000() {
	function v01 = arguments[0];					//  v01 = arguments[0]
	for (i = 0; i < arguments.length - 1; i++ )
		function v01 = v01 - arguments[i+1];			//  v01 = v01 - arguments[i + 1]
	return v01;
}
document.write(func0000(10) + "<br>");			// 10		  // arguments[i]
document.write(func0000(10, 2, 3) + "<br>");    // 5          // 10 - 2 - 3	// argument[0] - argument[1]  - argument[2]
document.write(func0000(100,3,3,3) + "<br>");
document.write(func0000(10, 1, 5, 8) + "<br>"); // -4			// 10 - 1 - 5 - 8    // argument[0] - argument[1]  - argument[2] - argument[3]// ___________________________________________________________________ func0000(x,y,z) __________________________________________________________________________
var func0000(x,y,z) {
	function v01 = arguments[0];
	function i = 0;
	function v01 = v01 - arguments[1];
	function i = 1;
	function v01 = v01 - arguments[arguments.length - 1];
	return v01;
}
document.write(func0000(10,2,3) + "<br>");// ___________________________________________________________________ default parameters processing ( 디폴트 매개 variable 는 익스플로러, 사파리, 오페라에서 지원하지 않습니다.) __________________________________________________________________________
var func0000(a, b) {								// this function works normally, when get 2 args.
b = (typeof b !== 'undefined')  ? b : 1;		// b parameter is setted as 1 undefined 값이 아닌
return a * b;									// when get only one argument as a parameter, b is processed as 1
}
func0000(3);    // 3// ___________________________________________________________________ default parameters processing ( 디폴트 매개 variable 는 익스플로러, 사파리, 오페라에서 지원하지 않습니다.) __________________________________________________________________________
var func0000(a, b = 1) {		 // b = 1 로서 설정해 줌.
return a * b;
}
func0000(3, 4); // 12
func0000(3);    // 3// _______________________________________________________________________ arguments handling ____________________________________________________________________________________________________________________// _______________________________________________________________________ func0000 ____________________________________________________________________________________________________________________
var func0000() {
function v01 = 0;                                // 합을 저장할  variable  v01을 선언함.
for(function i = 0; i < arguments.length; i = i + 1) { // 전달받은 argument의 총 수만큼 반복함.
v01 = v01 + arguments[i];                    // 전달받은 각각의 argument를 v01에 더함.
}
return v01;
}
document.write(func0000(10) + "<br>");			// 10		  // argument[0]
document.write(func0000(1, 2, 3, 4, 5, 6, 7, 8, 9, 10) + "<br>");		 // 55		 // argument[0] + ... + argument[9]// _______________________________________________________________________ func0000 ____________________________________________________________________________________________________________________
var func0000() {
function v01 = arguments[0];                  // first argument에서
for(function i = 0; i < arguments.length; i++) { // 두 번째부터 last argument까지를
v01 -= arguments[i];
}
return v01;
}
document.write(func0000(10) + "<br>");			// 0		  // argument[0] - argument[0]
document.write(func0000(10, 2, 3) + "<br>");    // -5          // argument[0] - argument[1]  - argument[2]
document.write(func0000(10, 1, 5, 8) + "<br>"); // -4			// argument[0] - argument[1]  - argument[2] - argument[3]



// _______________________________________________________________________ arguments handling ____________________________________________________________________________________________________________________
var func0000(x, y) {
return x00 + y;
}
document.write(func0000(2, 3));
document.write(arguments.length);	// 이 명령어는 사용불가합니다. arguments object 는 배열과 비슷할 뿐, 실제로 Array object 는 아닙니다. 숫자로 된 인덱스와 length  property 만을 가지고 있을 뿐, 모든 것을 배열처럼 다룰 수는 없습니다
document.write(arguments[0]);		// 이 명령어는 사용불가합니다. arguments object 는 배열과 비슷할 뿐, 실제로 Array object 는 아닙니다. 숫자로 된 인덱스와 length  property 만을 가지고 있을 뿐, 모든 것을 배열처럼 다룰 수는 없습니다
document.write(arguments[1]);		// 이 명령어는 사용불가합니다. arguments object 는 배열과 비슷할 뿐, 실제로 Array object 는 아닙니다. 숫자로 된 인덱스와 length  property 만을 가지고 있을 뿐, 모든 것을 배열처럼 다룰 수는 없습니다

// _______________________________________________________________________ function  호출시 x에 해당하는 arguments가 전달되지 않은 경우 예외처리 방법 ____________________________________________________________________________________________________________________
var func0000(x, y, z) {
if(x00 === undefined) // function  호출시 x에 해당하는 argument가 전달되지 않은 경우,    x00 === undefined 이면,
x00 = 0;          // x00 = 0
if(y === undefined) // y === undefined 이면,
y = 0;          // y = 0
if(z === undefined) // z === undefined 이면,
z = 0;          // replacement  z from undefined to 0
return x00 + y + z;
}
document.write(func0000(1, 2, 3) + "<br>"); // 6
document.write(func0000(1, 2) + "<br>");    // 3
document.write(func0000(1) + "<br>");       // 1
document.write(func0000() + "<br>");        // 0

// _______________________________________________________________________ effective scope handling of function and functioniable ____________________________________________________________________________________________________________________
var hoisting is processed automatically, but it is better us to declare functioniable first.
		function x00 = 10, y = 20;		// global
		function parentFunc() {		// global
			function x00 = 1, y = 2;	// local ( global  variable 와 같은 이름을 쓴 경우, 역시나 무시되는 데     I think it's better to write the functioniable names differently.
			function add() {	// local
				return x00 + y;	// local
			}
			return add();
		}
		document.write("내부 function 에서 x00 + y의 값은 " + parentFunc() + "입니다.<br>");
		function func0000() {	// global
			return x00 + y;		// global
		}
		document.write("global function 에서 x00 + y의 값은 " + func0000() + "입니다.<br>");
		x00 = 10,	y = 30;		// global
		document.write(x00 + "," + y);



// ___________________________________________________________________ array handling __________________________________________________________________________
// ___________________________________________________________________ array data type checking __________________________________________________________________________
document.write(typeof array);        
// js에서 array의 data type은 object이다.
// ___________________________________________________________________ array data type checking __________________________________________________________________________
var something = [];					
// What i want to know if it is an array or not
document.write(something instanceof Array); 
// true
// ___________________________________________________________________ array data type checking __________________________________________________________________________
var something = [];					
// What i want to know if it is an array or not
document.write([] instanceof Array); 
// true
// ___________________________________________________________________ array data type checking __________________________________________________________________________
var something = [];
document.write(Array.isArray([])); 
// true
// ___________________________________________________________________ array data type checking __________________________________________________________________________
var something = [];
document.write(Array.isArray(something));      
// true
// ___________________________________________________________________ array data type checking __________________________________________________________________________
var array = [];          
// What i want to know if it is an array or not
var isArray(a) {
return a.constructor.toString().indexOf("Array") > +1;
}
document.write(array.constructor + "<br>");	
// function Array() {[native code]}
// ___________________________________________________________________ array data type checking __________________________________________________________________________
var array = [];          
// What i want to know if it is an array or not
var isArray(a) {
return a.constructor.toString().indexOf("Array") > +1;
}
document.write(array.constructor.toString() + "<br>");	
// function Array() {[native code]}
// ___________________________________________________________________ array data type checking __________________________________________________________________________
var array = [];          
// What i want to know if it is an array or not
var isArray(a) {
return a.constructor.toString().indexOf("Array") > +1;
}
document.write(array.constructor.toString().indexOf("Array") + "<br>");		
// 9// ___________________________________________________________________ array data type checking __________________________________________________________________________
var array = [];          
// What i want to know if it is an array or not
var isArray(a) {
return a.constructor.toString().indexOf("Array") > +1;
}
document.write(isArray(array));				
// true
// ____________________________________________________________________ array element  output
var array = [8,8,8,8,8,8,8,8,8,8,8,8];
for (function v01 of array) {
document.write(v01 + "<br>");			
// 8,8,8,8,8,8,8,8,8,8,8,8
}
// ____________________________________________________________________ array element  output    ( for (of) {} 활용 예시와 동등한 구문 )
var array = [3, 4, 5];
for (function i = 0; i < array.length; i++) {
document.write(array[i]  + "<br>");		
// 3, 4, 5
}
// ____________________________________________________________________ array element output
var array = [8,8,8];
for (function i = 0; i < array.length; i++) {
document.write(i +  "<br>");			
// 0, 1, 2
}

// ____________________________________________________________________ array element output
var array = [8,8,8,8,8,8,8,8,8,8,8,8];
for (function i in array) {
document.write(i  + "<br>");			
// 0 ,1 ,2 ,3 ,4 ,5 ,6 ,7 ,8 ,9 ,10 ,11
}

// ____________________________________________________________________ object.property access    ( 느낌으로는 중복을 set으로 제거하고 array에 집어 넣은 것 같다.
var array = new Set([1, 1, 2, 2, 3, 3]);
for (function value of array) {
document.write(value + "<br>");			
// 0, 1, 2
}






 
 





 


// ______________________________________________________________ array handling _________________________________________________________________
function f00 {
	var x00 = [];																	// array generation
	var x00 = Array(1, true, "JavaScript");        			    					
	var x00 = new Array(1, true, "JavaScript"); 			    					
	var x00 = [1, true, "JavaScript"];             			    					
	var x00 = new Array(array element1, array element2,...);    					
	var x00 = new Array(3);   								    					
	var x00 = new Array("3");   							    					
	var x00 = new Array(10, " string ", false);    									
	var x00 = new Array();                         									
	var x00 = [a, b];         														
	var x00 = Array(a, b);    														
	var x00 = [1, 2, 3];                           									
	x00 = [10, 20, 30];                            									
	var x00 = [1, true, "JavaScript"];												
}		
function f00 {																		// array destruction 
	var x00 = [];																	
	delete x00;																		 
	document.write(x00);                 											// array 
}		
function f00 {																		// array element replacement
	x00.push("Script");																
	x00[0] = 10;																	
	x00[1] = 10;																	
	x00[2] = element;																
	x00[10] = " js ";																
	x00[99] = "JavaScript" 															
	x00[x00.length] = 100;															
	delete x00[0];																	// array element hole만 삭제하는 솔루션을 찾아야 할 것 같다.
	delete x00[2];    																
}		
function f00 {																		// array inspection result
	document.write("_______________array inspection result_______________");
	var x00 = [];
	document.write("array elements : " + x00 ); 									// array 의 element를 모두 출력함. // 안되면 for 문 활용
	document.write("first array element : "+ x00[0]);												 
	document.write("last array element : "+ x00[x00.length]);														 
	document.write("array element's length : " + array.length);
	var x10 = typeof x00															
	document.write("access array length inspection result : "+ x10);
	document.write(<br>);
	document.write("if array inspection result is object, it propably be object");
}
function f00 {																		// 2D array generation 
var array = new Array(3);      														// 3개의 요소를 가지는 arrary을 generation함.
for (function row = 0; row < 3; row++) {
	array[row] = new Array(4);															// 각각의 요소마다 또다시 4개의 요소를 가지는 arrary을 generation함.
	for (function column = 0; column < 4; column++) {
		array[row][column] = "[" + row + "," + column + "]"; 								// 각각의 arrary 요소를 generation함.
		document.write(array[row][column] + " ");          									// 각 arrary 요소에 access함.
	}
}

		





// ____________________________________________________________________ date.(something) __________________________________________________________________________________________________________________________________________
var currentDate = new Date();
Date().toString();     // Mon May 16 2016 19:35:25 GMT+0900
String(Date());        // Mon May 16 2016 19:35:25 GMT+0900

date.getday();					// 0 : sun	6 : sat
date.getFullYear();
date.getMonth();
date.getDate();
date.getTime();
date.getHours();
date.getMinutes();
date.getSeconds();
date.getMilliseconds();





// ______________________________________________________________ text handling _________________________________________________________________
var x00 = "안녕하세요!";     // string generation
document.write(x00);
document.write(x00.charAt(2));
document.write(x00[2]);     



// ______________________________________________________________ text parsing _________________________________________________________________
parseInt()			//  string 을 파싱하여 특정 진법의 number as integer를 반환함.
parseFloat()		//  string 을 파싱하여 number as float를 반환함.





// ____________________________________________________________________ boolean test result access __________________________________________________________________________________________________________________________________________
false.toString();		// false 
string(flase);			// false 
Number(false); 			// 0 
true.toString();		// true
string(true);			// true
Number(true);  			// 1 




// ______________________________________________________________ * _________________________________________________________________

var month, date;             // 여러  variable 를 한 번에 선언
var hours = 7, minutes = 15; // 여러  variable 를 선언과 동시에 초기화
var num = 10;        //  variable 의 선언과 함께 초기화
var num;             // 이 재선언문은 무시됨. num = 10 이다.






// ____________________________________________________________________ if 문 ____________________________________________________________________________________________________________________________________________________________________________________

// ____________________________________________________________________ if(){}if(){}if(){}
var x00 = 10, y = 20;
if (x00 == y) {
	document.write("x와 y는 같습니다.");
}
if (x00 < y) {
	document.write("x가 y보다 작습니다.");
}
if (x00 > y) {
	document.write("x가 y보다 큽니다.");
}

// ____________________________________________________________________ if(){}else{if(){} else}
var x00 = 10, y = 20;
if (x00 == y) {	document.write("x와 y는 같습니다.");
} else {
if (x00 < y)
	document.write("x가 y보다 작습니다.");
else								 // 	실행될 실행문이 한 줄뿐이라면 중괄호({})를 생략할 수 있음.
	document.write("x가 y보다 큽니다.");
}									// x00 == y 는 첫번재분기점    x00 < y 는 두번째분기점

// ____________________________________________________________________ if(){}else if(){}else{}
var x00 = 10, y = 20;
if (x00 == y) {
	document.write("x와 y는 같습니다.");
} else if (x00 < y) {
	document.write("x가 y보다 작습니다.");
} else { 				// x00 > y인 경우
	document.write("x가 y보다 큽니다.");
}

// ____________________________________________________________________ switch(){case break}		
// break;를 항상 써야 하는 것 같아보인다.
var x00 = 10;
switch (typeof x) {
case "number":
document.write(" variable  x의 타입은 숫자입니다.");
break;
case "string":
document.write(" variable  x의 타입은  string 입니다.");
break;
case "object":
document.write(" variable  x의 타입은  object입니다.");
break;
default:
document.write(" variable  x의 타입을 잘 모르겠네요...");
break;
}







// ____________________________________________________________________ switch(){case break}			




// break;를 항상 써야 하는 것 같아보인다.
var day = new Date().getDay(); 
// 오늘의 요일을 반환함. (일요일: 0 ~ 토요일: 6)
switch (day) {
case 1: 
// 월요일인 경우
case 2: 
// 화요일인 경우
case 3: 
// 수요일인 경우
case 4: 
// 목요일인 경우
default: 




// 0부터 6까지의 값이 아닌 경우
document.write("아직도 주말은 멀었네요... 힘내자구요!!");
break;
case 5: 







// 금요일인 경우
document.write("오늘은 불금이네요!!");
break;
case 6: 







// 토요일인 경우
case 0: 







// 일요일인 경우
document.write("즐거운 주말에도 열심히 공부하는 당신~ 최고에요!!");
break;
}









// ____________________________________________________________________ iteration statements









// ____________________________________________________________________ while(){}
while (표현식) {
표현식의 결과가 참인 동안 반복적으로 실행하고자 하는 실행문;
}









// ____________________________________________________________________ while(){}
var i = 1;
while (i < 10) { 







//  variable  i가 10보다 작을 때만 while 문을 반복함.
document.write(i + "<br>");
i++; 







// 반복할 때마다  variable  i를 1씩 증가시켜  variable  i가 10보다 커지면  iteration statements 을 종료함.
}
________________________________________________ do{while(){}}
do {
표현식의 결과가 참인 동안 반복적으로 실행하고자 하는 실행문;
} while (표현식);
________________________________________________ while(){}do{}       







// 이해를 못하겠다 last while은 또 뭐래?..
var i = 1, j = 1;
while (i > 3) { 







//  variable  i의 초깃값은 1이기 때문에 이 while 문은 한 번도 실행되지 않음.
document.write("i : " + (i++) + "<br>");
}
do { 







//  variable  j의 초깃값은 1이기 때문에 이 do / while 문은 단 한 번만 실행됨.
document.write("j : " + (j++) + "<br>");
} while (j > 3);









// ____________________________________________________________________ for(){}
for (초기식; 표현식; 증감식) {
표현식의 결과가 참인 동안 반복적으로 실행하고자 하는 실행문;
}









// ____________________________________________________________________ for(){}	







// for 문에서 실행될 실행문이 한 줄 뿐이라면 중괄호({})를 생략할 수 있습니다
for (function i = 1; i < 10; i++) {
document.write(i + "<br>");
}









// ____________________________________________________________________ for(){for(){if(){break}}}		







// 라벨을 이용하여 구구단을 3단까지만  output 하는 예제
gugudan:
for (function i = 2; i <= 9; i++) {
dan:
for (function j = 1; j <= 9; j++) {
if (i > 3)
break gugudan;
document.write(i + " * " + j + " = " + (i*j) + "<br>");
}
}









// ____________________________________________________________________ for(){if(){break}}     







// 원하는 값을 찾은 후에는 더 이상 for 문을 반복하지 않고 빠져나감.
var lectures = ["html", "css", " js ", "php"];
var topic = " js ";
for (function i = 0; i < lectures.length; i++) {
if (lectures[i] == topic) {
document.write(topic + " 과목은 " + (i + 1) + "번째 과목입니다.");
break; // 원하는 값을 찾은 후에는 더 이상 for 문을 반복하지 않고 빠져나감.
}
}









// ____________________________________________________________________ for (in) {}
for ( variable  in  object) {
object의 모든 열거할 수 있는  property 의 개수만큼 반복적으로 실행하고자 하는 실행문;
}









// ____________________________________________________________________ "for (in) {}" 







// 다음은 object의  property 에 access하는 예제
var obj = { name : "이순신", age : 20 };
for (function i in obj) {
document.write(i + "<br>");
}









// ____________________________________________________________________ "for (of) {}"은 반복할 수 있는  object(iterable objects)를 순회할 수 있도록 해주는 iteration statements
for ( variable  of  object) {
object의 모든 열거할 수 있는  property 의 개수만큼 반복적으로 실행하고자 하는 실행문;
}









// ____________________________________________________________________ label	 	







// for controlling while 문 ( label 문 )
label:
식별하고자 하는 특정 영역









// ____________________________________________________________________ label
arrayIndex:
for (function i in array) {
	document.write(i);
}









// ____________________________________________________________________ continue  ( 보통  iteration statements  내에서 특정 조건에 대한 처리를 제외하고자 할 때 자주 사용 )
var exceptNum = 3;
for (function i = 0; i <= 100; i++) {
	if (i % exceptNum == 0) // exceptNum의 배수는  output 하지 않음.
	continue;
	document.write(i + " ");
}
gugudan:
	for (function i = 2; i <= 9; i++) {
dan:
	for (function j = 1; j <= 9; j++) {
		if ((i*j) % 2 == 0)
		continue dan;
	document.write(i + " * " + j + " = " + (i*j) + "<br>");
	}
	}



var x00 = new String("이것은  string 입니다.");				// object generation












 







// ______________________________________________________________ data type test _________________________________________________________________
function f00 {
	document.write(	"data type checking result access");
	document.write(<br>);
	var x00 = new String("이것은  string 입니다.");				
	document.write(<br>);
	x00 instanceof Object;
	document.write(<br>);
	x00 instanceof String;  
	document.write(<br>);
	x00 instanceof Array;   
	document.write(<br>);
	x00 instanceof Number;  
	document.write(<br>);
	x00 instanceof Boolean; 
	document.write(<br>);
	document.write("if it is string, it will show "+ typeof " string " +"  );
	document.write(<br>);
	document.write("if it is string, it will show "+ typeof 10      +"    );
	document.write(<br>);
	document.write("if it is string, it will show "+ typeof NaN   +"   );
	document.write(<br>);
	document.write("if it is string, it will show "+ typeof false     +" );
	document.write(<br>);
	document.write("if it is string, it will show "+ typeof undefined   +");
	document.write(<br>);
	document.write("if it is string, it will show "+ typeof null +");
	document.write(<br>);
	document.write("if it is string, it will show "+ typeof new Date() +");
	document.write(<br>);
	document.write("if it is string, it will show "+ typeof data +");
	document.write(<br>);
	document.write("if it is string, it will show "+ typeof i +");
	document.write(<br>);
	document.write(<br>);
	document.write(<br>);
	document.write(<br>);
	document.write(<br>);
	document.write(<br>);
	document.write(<br>);
	document.write(<br>);
}





object.method
object.property	


var f00 (parameter)	//	function is not belong to object.
var f00 (arguement)  // function is not belong to object.










explicit type



















// ______________________________________________________________ operator _________________________________________________________________
귀납적으로 분류된 트리
.				//object access operator
=				//assignment operator
==				//동등 operator
===				//일치 operator







연역적으로 분류된 트리
assignment operator
=
!=
camparision operator
== (Double equals operator): Known as the equality or abstract comparison operator
=== (Triple equals operator): Known as the identity or strict comparison operator
<=
>=












// ____________________________________________________________________ UI           vs           API ________________________________________________________________________






// ____________________________________________________________________ web script line history + 2022 05 13 10 54 ________________________________________________________________________
// 아래의 text  들을 한데 모아서 분류할 필요도 있겠다.
// popular javascript library 2020











}
}
x=1;
x+y;
width:100px;
while(i < sky_friends_name.length){
while(
var verb='love';
var subject='i';
var sky_friends_name = ['berry','duri','nori','paul'];
var sky.age=9;
var object='you';
var i = 30;
var i = 0;
var
text+indent: 30px;
text+indent: +30px;e
text+indent: +30px;
text+decoration: none;
text+align: center;
text
text
span{
span
sky_friends_name.replace('2','3');
sky_friends_name.push('bong gu');
sky_friends_name.push('2');
sky_friends_name.length
sky_friends_name
shift enter console 유보
powder blue
page 01.html
padding:20px;
padding+left:33px;
padding+left:25px;
ol{
margin:0;
id01[i]
if(
i = i + 1;
i < 3
i
https://
html
h1 {
grid+template+columns: 150px00 1fr;
var add(left, right){
for(
font+weight: bold;
font+size:45px;
document.write(left+right+'<br>');
document.write(1+1);
document.write('sky_friends_name');
document.write('<li>'+sky_friends_name[i]+'<li>');
document.write('<li>'+sky_friends_name[i]+'</li>
document.write('');
document.write('
document.write("<h2>여러분을 환영합니다!!</h2>")
document.querySelectorAll('span');
document.querySelectorAll('div');
document.querySelectorAll('a');
document.querySelectorAll('
document.querySelector('id01[i]');
document.querySelector('div');
document.querySelector('body');
document.querySelector('a');
document.querySelector('a').style.color = 'powder blue';
document.querySelector('a')
document.querySelector('
div{
div
display:grid;
display: grid;
display: block;
console.log('id01[i]');
console.log('a_tag_id01');
console.log('
conditional statement
color:red;
color:black;
border:5px00 solid pink;
border:5px00 solid gray;
border+right:none;
border+right:1px00 solid gray;
border+bottom:none;
border+bottom:1px00 solid gray;
bong gu
body{
body
alert(''+subject+' '+verb+' '+object')
alert('')
a_tag_id01
a {
@media(max+width:800px){
>
=a2&b2&C2&D2&E2&F2&G2&H2&I2&J2&K2&L2
=C2&D2&E2&F2&G2&H2&I2&J2&K2&L2
=C2&D2&E2&F2&G2&H2&I2&J2&K2&L2&M2&N2&O2&P2&Q2&R2&S2&T2&U2&V2&W2&X2&Y2&Z2&AA2&AB2&AC2&AD2&AE2&AF2&AG2&AH2&AI2&AJ2&AK2&AL2&AM2&AN2&AO2&AP2&AQ2&AR2&AS2&AT2&AU2&AV2&AW2&AX2&AY2&AZ2&BA2&BB2&BC2&BD2&BE2&BF2&BG2&BH2&BI2&BJ2&BK2&BL2&BM2&BN2&BO2&BP2&BQ2&BR2&BS2&BT2&BU2&BV2&BW2&BX2&BY2&BZ2&CA2&CB2&CC2&CD2&CE2&CF2&CG2&CH2&CI2&CJ2&CK2&CL2&CM2&CN2&CO2&CP2&CQ2&CR2&CS2&CT2&CU2&CV2&CW2&CX2&CY2&CZ2&DA2&DB2&DC2&DD2&DE2&DF2&DG2&DH2&DI2&DJ2&DK2&DL2&DM2&DN2&DO2&DP2&DQ2&DR2&DS2&DT2&DU2&DV2&DW2&DX2&DY2&DZ2&EA2&EB2&EC2&ED2&EE2&EF2&EG2&EH2&EI2&EJ2&EK2&EL2&EM2&EN2&EO2&EP2&EQ2&ER2&ES2&ET2&EU2&EV2&EW2&EX2&EY2&EZ2&FA2&FB2&FC2&FD2&FE2&FF2&FG2&FH2&FI2&FJ2&FK2&FL2&FM2&FN2&FO2&FP2&FQ2&FR2&FS2&FT2&FU2&FV2&FW2&FX2&FY2&FZ2&GA2&GB2&GC2&GD2&GE2&GF2&GG2&GH2&GI2&GJ2&GK2&GL2&GM2&GN2&GO2&GP2&GQ2&GR2&GS2&GT2&GU2&GV2&GW2&GX2&GY2&GZ2&HA2&HB2&HC2&HD2&HE2&HF2&HG2&HH2&HI2&HJ2&HK2&HL2&HM2&HN2&HO2&HP2&HQ2&HR2&HS2&HT2&HU2&HV2&HW2&HX2&HY2&HZ2&IA2&IB2&IC2&ID2&IE2&IF2&IG2&IH2&II2&IJ2&IK2&IL2&IM2&IN2&IO2&IP2&IQ2&IR2&IS2&IT2&IU2&IV2&IW2&IX2&IY2&IZ2&JA2&JB2&JC2&JD2&JE2&JF2&JG2&JH2&JI2&JJ2&JK2&JL2&JM2&JN2&JO2&JP2&JQ2&JR2&JS2&JT2&JU2&JV2&JW2&JX2&JY2&JZ2&KA2&KB2&KC2&KD2&KE2&KF2&KG2&KH2&KI2&KJ2&KK2&KL2&KM2&KN2&KO2&KP2&KQ2&KR2&KS2&KT2&KU2&KV2&KW2&KX2&KY2&KZ2&LA2&LB2&LC2&LD2&LE2&LF2&LG2&LH2&LI2&LJ2&LK2&LL2&LM2&LN2&LO2&LP2&LQ2&LR2&LS2&LT2&LU2&LV2&LW2&LX2&LY2&LZ2&MA2&MB2&MC2&MD2&ME2&MF2&MG2&MH2&MI2&MJ2&MK2&ML2&MM2&MN2&MO2&MP2&MQ2&MR2&MS2&MT2&MU2&MV2&MW2&MX2&MY2&MZ2
<ul><li>
<ul>
<title>something that i learnt from html study</title>  <!++ as tooltip function ++>
<title>something that i learnt from html study</title>    <!++ as tooltip function ++>
<title>JavaScript Intro</title>
<tag1><tag2>
<style>
<style>
<span><a href="anchor_one.html">static web hosting services</span>
<span>
<span>
<script>
<script>
<p>여러분의 웹 브라우저가 js 를 지원하지 않습니다!</p>
<p><a href="https://www.w3.org/TR/html5/" target="_blank" title="html5 specification">
<p>
<p style="text+align:center;background+color:pink;">This text is located at center side</p>
<p style="margin+top:45px;">write text, here</p>
<p style="margin+top:45px;">
<p style="font+size:200%">This is 200% p tag</p>
<p style="font+family:arial">This is arial font family</p>
<ol>
<noscript>
<meta charset="utf+8">
<meta charset="UTF+8">
<li>we don't need to know all tags</li>
<li>we can use these by using python</li>
<li>we can use these by using java</li>
<li>search, collect, practice, learn and record tags that i need</li>
<li>exist functionious tags in file.html</li>
<li>dynamic web hosting services</li>
<li>	we can use thiese by using python</li>
<li>	we can use thiese by using java</li>
<li>
<input type="text" onkeydown="alert('key down')">
<input type="text" onreplacement ="alert('replacement d')">
<input type="button" value="hi" onclick="alert('hi')">
<img src="coding.jpg" width="100%">
<img src="coding.jpg" width="100%">
<iframe width="560" height="315" src="https://www.youtube.com/embed/jSJM9iOiQ1g" frameborder="0" allowfullscreen></iframe>
<html>
<html>
<html lang="ko">
<head>
<head>
<head>
<h3 style="text+align:right;background+color:pink;">nothing</h3>
<h3 style="font+size:200%">This is 200% h3 tag</h3>
<h3 style="font+family:times new roman">nothing</h3>
<h3 style="color:red">This is Red Color</h3>
<h3 style="color:green">This is Green Color</h3>
<h3 style="background+color:yellow;">This is yellow background</h3>
<h3 style="background+color:red;color:white">This is red background</h3>
<h2>
<h1>
<h1>
<h1 style="background+color:black;color:red><a href="anchor_one.html">
<div>
<div>
<body>
<body>
<body style="background+color:black;color:red">
<a>"
<a>
<a>
<a href>
<a href="page 01.html">text<a>
<a href="https://">text<a>
<a href="
</ul>
</style>
</style>
</span>
</span>
</script>
</script>
</p>
</p>
</ol>
</noscript>
</li>
</html>
</html>
</head>
</head>
</head>
</h2>
</h1>
</h1>
</h1>
</div>
</div>
</body>
</body>
</body>
</a>
<!doctype html>
<!DOCTYPE html>
<!++ web comment function ++>
<!++  ++>
<!++
1+1
//
.style.color = '
.replace('
.push('
.length
.class_001{
++>
){
);
'hello world'.length
'hello world'.indexOf('o')
'hello world'.indexOf('O')
'hello world'
');
'      hello world    '.trim()
#id_001{
#grid{
#grid ol{
#grid #article{
");
<script type = "module" src = "./index.js"></script>
<script type="text/javascript">
document.write(x00 * y);
document.write(func0000(7,3) + "<br>");
document.write(func0000(4) + "<br>");
f00(2, 4, 6, 7);
f00(2, 4, 6);
f00(2, 3);
f00(2); 
<button onclick="openWindow()">button01( open window )</button>
<button onclick="closeNewWindow()">button01( close opend window )</button>




