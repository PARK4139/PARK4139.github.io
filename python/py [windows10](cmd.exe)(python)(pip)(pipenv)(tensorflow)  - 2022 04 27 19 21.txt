(windows 10)(cmd.exe)(python)



rem insatll (python)

rem enter https://www.python.org/downloads/windows/

rem replace path length limit disable    





rem show (installed package list)

cls

pip list

pip list --outdated

pip search "query"					&&rem show package list of PyPI









beautifulsoup4==4.10.0

cycler==0.11.0

fonttools==4.28.5

kiwisolver==1.3.2

matplotlib==3.5.1

numpy==1.21.5

packaging==21.3

Pillow==8.4.0

pyparsing==3.0.6

python-dateutil==2.8.2

six==1.16.0

soupsieve==2.3.1











rem replace (pip)

curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py

python get-pip.py

# copy path

# add path

# restart cmd.exe

curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py

python get-pip.py											&&rem pip is installed, from now on

python -m pip install -upgrade pip

python -m pip install pip==18.1

pip --version

pip show pip









rem replace (tensorflow)

cls

pip show tensorflow

pip install tensorflow			&&rem as latest version

pip install tensorflow==1.0.4

pip uninstall tensorflow-1.0.4

pip show tensorflow



























rem install (pipenv)

pip install pipenv





rem create virtual environment as (pipenv)

pipenv --python 3.9.12



rem create virtual environment as (pipenv)

pipenv shell





rem install packages at virtual environment as (pipenv)

pipenv install numpy pandas matplotlib

pipenv install tensorflow

python -c "import tensorflow as tf;print(tf.reduce_sum(tf.random.normal([1000, 1000])))"





rem use tensorflow in virtual environment as (pipenv)

Python 3.9 GPU 지원	https://storage.googleapis.com/tensorflow/windows/gpu/tensorflow_gpu-2.6.0-cp39-cp39-win_amd64.whl

Python 3.9 CPU만	https://storage.googleapis.com/tensorflow/windows/cpu/tensorflow_cpu-2.6.0-cp39-cp39-win_amd64.whl











pipenv lock





rem remove virtual environment as (pipenv)

pipenv --rm





rem shutdown virtual environment as (pipenv)

exit





rem etc (pipenev)

pipenv run [cammands]

pipenv run python

















rem ?TensorFlow Docker? 이것은  가상환경을 나누기 위한것으로 추측된다.

rem install docker desktop on windows 10

rem enter https://docs.docker.com/desktop/windows/install/

rem click "docker desktop for windows"

rem open cmd.exe

start /w "" "C:\Users\hangil01\Desktop\Docker Desktop Installer.exe" install

net localgroup docker-users <user> /add









	















import os

os.system("cls")	# clear screen





# (show data type)

str1='2022'

str1=2022

type(str1)	#show class type





# (replacing text)

str1='2022'

str1=2022

str(str1)	#take ('2022')

int(str1)	#take (2022)

float(str1)	#take (2022.0)



(string)

data='python'

data[0]		#take the first digit from the front(indexing)

data[1]		#take the first digit from the front(indexing)

data[2]		#take the first digit from the front(indexing)

data[3]		#take the first digit from the front(indexing)

data[5]		#take the first digit from the front(indexing)

data[-1]	#take the first digit from the back(indexing)

data[-2]	#take the first digit from the back(indexing)

data[-3]	#take the first digit from the back(indexing)

data[-4]	#take the first digit from the back(indexing)

data[-5]	#take the first digit from the back(indexing)

data[-6]	#take the first digit from the back(indexing)

data[::1]	#take string that offset as 2(indexing)

data[::-1]	#take string that offset as -1

data[::2]	#take string that offset as 2(indexing)

data[::-2]	#take string that offset as -2







(replace "-" to " " by using replace method)

str1='010-6392-4139'

str1=str1.replace("-"," ")

str1=str1.replace("-","")





("date"을     split refer to ".")

date = "2022.04.03"

date.split(".")

date.split(".")[-1]

date.split(".")[-2]

date.split(".")[-3]

date.split(".")[0]

date.split(".")[1]

date.split(".")[2]

date

print(date)

print(date.split(".")[2])









string="I LOVE U"

string.split(" ")

string.split(" ")[0]

string.split(" ")[2]

string.split(" ")[0]+string.split(" ")[2]

string.split(" ")[0]*10

string.split(" ")[0]*20

string.split(" ")[0]*string.split(" ")[2]

(string.split(" ")[0]+string.split(" ")[2])*3





# (with 데이터타입상관)										(less useful way)

string1 = "김민수" 

number1 = 10

string2 = "이철희"

number2 = 13

print("이름:%s 나이:%d" %(name1, age1))

print("이름:%s 나이:%d" %(name2, age2))







# (without 데이터타입상관)									(less useful way)

string1 = "김민수" 

number1 = 10

string2 = "이철희"

number2 = 13

print("이름: {} 나이: {}".format(name1, age1))

print("이름: {} 나이: {}".format(name2, age2))







# (by using f-string that support from python 3.6)      (more useful way)

string1 = "김민수" 

number1 = 10

string2 = "이철희"

number2 = 13

print(f"이름: {name1} 나이: {age1}")

print(f"이름: {name2} 나이: {age2}")







data = "5,969,782,550"

data.replace(",","")

int(data.replace(",",""))







data=["a","b","c","d","f"]

data = "123   2020/03(E) (IFRS연결)       321"

data[:]			# whole string

data[1:]		# remove from the front and show

data[2:]		# remove from the front and show

data[3:]		# remove from the front and show

data[:-1]		# remove from the back and show

data[:-2]		# remove from the back and show

data[:1]		# show from the front

data[:2]		# show from the front

data[:3]		# show from the front

data[-1:]		# show from the back

data[-2:]		# show from the back

data[-3:]		# show from the back







data = "   삼성전자    "

data.strip()			#strip from the right and left.

data.rstrip()			#strip from the right.

data.lstrip()			#strip from the left.

data





data = "aaaaaaaaaaAAAAAAAAA.XLSX"

data.upper()

data.lower()

data.capitalize()

data.endswith(".xlsx")

data.endswith(".XLSX")

data.startswith("aaa")

data.startswith("AAA")

data









data=["3","1600","1"]







# (문자열 원소를 가진 list handing)

data = ["avengers", "닥터 스트레인지", "스플릿", "럭키"]

data2=["i","will","be","a","pretty","good","programmer"]

data+data2

data2+data

data.insert(0,"batman")

data.insert(1,"batman")

data.append("batman")	#add "batman" from the back of the list.

del data[0]

del data[1]

len(data)				# show 원소개수

data











(calculate matrix by using numpy)

import numpy

data=[1,2,3]

numpy.array(data)

numpy.array(data)**2

numpy.array(data)+1

numpy.array(data)+1







# (숫자 원소를 가진 list handing)

data=[3,1600,1]

data=

min(data)

max(data)

sum(data)

len(data)				# show 원소개수

sum(data)/len(data)







data=["1","2","3","4","5","6","7","8"]

data[::2]				#select only 홀수, and show





data=["1","2","3","4","5","6","7","8"]

nums[1::2]				#select only 짝수, and show

	

	

data=["1","2","3","4","5","6","7","8"]

nums[::-1]				#show 역방향으로 출력하라





	

[:10]	

	

	



















	

	

import os #for bring 파일명, 폴더명 정보

import shutil #for moving file

import tkinter # for uI design











open application programming interface

KOREAN PUBLIC OPEN DATA

공공데이터포털









import random

dice=random.radint(1,6)

print(dice)





family = ['박경수','신옥희','박정훈','박정우']

print(family[0])

print(family[2])

print(len(family))

family.remove('박정훈')

family





lower_alphabet = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']

print(lower_alphabet [0])

print(lower_alphabet [1])

print(lower_alphabet [2])

print(lower_alphabet [3])

print(lower_alphabet [23])

print(lower_alphabet [-1])	#LIST의 마지막 순번의 값을 출력

print(lower_alphabet [1:3]	#LIST의 1번부터 3번까지 슬라이스한 값을 출력

print(lower_alphabet [0:3]	#LIST의 0번부터 3번까지 슬라이스한 값을 출력

print(lower_alphabet [:3]	#LIST의 3번 미만의 값을 출력

print(lower_alphabet [3:]	#LIST의 3번 초과의 값을 출력

lower_alphabet.remove('a')	

lower_alphabet





import matplotlib.pyplot as plt

plt.plot([1,2,3,4])

plt.show()







communication between server and client

http communication, 단방향

socket communication ,양방향

tcp

udp





MAKE PROGRAM BY IMPLING PEP-8 PYTHON CODING STYLE



















2	https://www.wanted.co.kr/

2	https://www.jobplanet.co.kr/contents

2	https://www.catch.co.kr/

2	인디드

3	LOG IN AS GOOGLE ACCOUNT

 



플레이데이터 프리레슨 4기 지원완료(5일 파이선 프로젝트)

플레이데이터 AI BOOTCAMP COURSE 18기 지원하고 싶은데...직장포기하고 다녀야 하네...프리랜서면 모를까...







as 박정훈 스타일 표준수학문제 (컴퓨터로 하는 수학)(with python)

초등학교 수준부터 시작이다.





박정훈 스타일 메모방법표준

박정훈 스타일의 소프트웨어개발 표준소스코드

박정훈 스타일의 소프트웨어개발 표준 모델을 만들어 사용하자

소프트웨어 개발 자동화 소프트웨어





이산수학

그래프이론

정보이론

수리논리학

도메인이론

확률론

통계학

가적분계

경제물리학

계산가능성이론

계산복잡도이론

오토마타이론

알고리즘

알고리즘분석

자료구조

프로그래밍언어

컴파일러

소프트웨어공학

요구공학

정형기법

역공학

컴퓨터 프로그래밍

컴퓨터구조

운영체제

폰노이만구조

컴퓨터네트워크

암호학

인공지능

자동추론

로봇학

컴퓨터비전

MACHINE LEARNING

DATABASE

DATA MININNG

COMPUTER GRAPHICS

영상 처리

인간과 컴퓨터 상호작용







공공데이터 활용 개발 프로젝트







FINDING DATA PATTERN





미세먼지 데이터 수집

미세먼지 데이터 삭제

초미세먼지 데이터 수집

초미세먼지 데이터 삭제





AI SECRETARY

AI FOR AI





BRAIN RESERCH

AI PLATFORM	

____________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________



	

	



















    



	









    







    

sorted

# add path of python.exe to path as system variable

# enter position of python.exe

# copy address of python.exe

# enter 고급 시스템 설정

# alt n(환경 변수)

# click path of 시스템 변수

# alt i(edit)

# alt n(새로 만들기)

# save and get out





# show version

pip3 --version

python3 --version















# 	

	# python third party packages

	pandas

    numpy	

	virtualenv(virtual environment, 특정 버전 최신화 불가)

    conda(virtual environment)

	pyenv(virtual environment, version mgmt tool)

    pipenv(virtual environment, recommanded to use by python hompage)









모든 데이터 백업

윈도우즈 초기화







모든 데이터 백업

OS 재설치





모든 데이터 백업

OS image 복제



	

나이틀리